{"file_contents":{"design_guidelines.md":{"content":"# OPC UA Dashboard Design Guidelines\n\n## Design Approach\n**System Approach**: Following Material Design principles with enterprise customizations for industrial IoT applications. This utility-focused dashboard prioritizes data clarity, real-time monitoring efficiency, and operational reliability.\n\n## Core Design Elements\n\n### Color Palette\n**Dark Mode Primary** (recommended for industrial environments):\n- Background: `210 20% 8%` (deep blue-gray)\n- Surface: `210 15% 12%` \n- Primary: `210 100% 60%` (bright blue for status indicators)\n- Success: `120 60% 50%` (operational green)\n- Warning: `45 100% 60%` (amber alerts)\n- Error: `0 70% 55%` (critical red)\n- Text Primary: `210 10% 95%`\n- Text Secondary: `210 10% 70%`\n\n**Light Mode Alternative**:\n- Background: `210 20% 98%`\n- Surface: `210 15% 95%`\n- Text Primary: `210 20% 15%`\n\n### Typography\n- **Primary Font**: Inter via Google Fonts\n- **Monospace**: JetBrains Mono for data values and timestamps\n- **Hierarchy**: text-xs (12px) for metadata, text-sm (14px) for body, text-lg (18px) for headings, text-2xl (24px) for dashboard titles\n\n### Layout System\n**Spacing Primitives**: Consistent use of Tailwind units `2, 4, 8, 12` for padding, margins, and gaps\n- Grid layouts with 4-unit gutters\n- Card padding of 6 units\n- Section spacing of 12 units\n\n### Component Library\n\n**Navigation**:\n- Fixed sidebar with collapsible sections\n- Breadcrumb navigation for deep data hierarchies\n- Quick action toolbar with connection status\n\n**Data Display**:\n- **Metric Cards**: Large numerical displays with trend indicators\n- **Real-time Charts**: Time series with configurable intervals\n- **Status Indicators**: Color-coded connection states and device health\n- **Data Tables**: Sortable, filterable with live updates\n- **Alert Panels**: Hierarchical severity with timestamp tracking\n\n**Forms & Controls**:\n- Configuration panels with grouped settings\n- Toggle switches for boolean values\n- Slider inputs for threshold adjustments\n- Multi-language selector dropdown\n\n**Overlays**:\n- Modal dialogs for device configuration\n- Toast notifications for connection events\n- Contextual tooltips for technical terminology\n\n### Visual Hierarchy\n- **High Priority**: Connection status, critical alerts (large, prominent)\n- **Medium Priority**: Live data values, recent changes (standard sizing)\n- **Low Priority**: Historical data, configuration options (compact, secondary styling)\n\n### Responsive Behavior\n- Desktop-first approach for monitoring stations\n- Tablet adaptation with collapsible sidebar\n- Mobile summary view with essential metrics only\n\n### Performance Considerations\n- Minimal animations limited to data transitions and loading states\n- Efficient data visualization with canvas-based charts\n- Optimistic UI updates for real-time data streams\n\nThis design prioritizes operational clarity, reduces cognitive load during monitoring tasks, and maintains professional aesthetics suitable for industrial environments.","size_bytes":2964},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# OPC UA Dashboard\n\n## Overview\n\nThis is a web-based dashboard for monitoring and managing OPC UA (Open Platform Communications Unified Architecture) servers and PLCs in industrial IoT environments. The application provides real-time data visualization, JSON-based PLC configuration management, and multilingual support (English/Japanese). It features a modern, responsive interface optimized for industrial monitoring with live data tracking, server connection management, and comprehensive status monitoring.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and modern development practices\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Framework**: shadcn/ui component library built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with custom design tokens following Material Design principles adapted for industrial applications\n- **State Management**: TanStack Query for server state management with optimistic updates and caching\n- **Real-time Communication**: Socket.IO client for live data subscriptions and WebSocket connections\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Build System**: Vite for development and production builds with ESBuild for server bundling\n- **WebSocket**: Socket.IO server for real-time bidirectional communication\n- **File Handling**: Multer middleware for JSON configuration file uploads\n- **API Pattern**: RESTful endpoints with standardized error handling and logging middleware\n\n### Database & Data Layer\n- **ORM**: Drizzle ORM configured for PostgreSQL with type-safe database operations\n- **Database**: PostgreSQL (via Neon serverless) for production with connection pooling\n- **Storage Interface**: Abstracted storage layer with in-memory implementation for development\n- **Schema Management**: Centralized schema definitions using Zod for runtime validation\n\n### Component Design System\n- **Color Palette**: Dark mode optimized for industrial environments with blue-gray backgrounds and bright status indicators\n- **Typography**: Inter font family with JetBrains Mono for data values and timestamps\n- **Layout System**: Consistent spacing using Tailwind's 4-unit grid system\n- **Status Indicators**: Color-coded system (green/active, amber/maintenance, red/error) for device health\n- **Responsive Design**: Mobile-first approach with collapsible sidebar and adaptive layouts\n\n### Real-time Data Architecture\n- **Subscription Model**: Event-driven architecture for PLC data updates\n- **Connection Management**: Selective server connections with automatic reconnection handling\n- **Data Updates**: 500ms-1s refresh intervals with subscription-based updates to minimize polling\n- **State Synchronization**: Client-server state sync through WebSocket events\n\n### Internationalization\n- **Language Support**: English and Japanese localization\n- **Component Integration**: Language switcher component with context-based translations\n- **Design Consideration**: UI accommodates varying text lengths between languages\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18+ with React DOM for modern component lifecycle\n- **TypeScript**: Full TypeScript support across client and server\n- **Vite**: Development server and build tooling with HMR support\n\n### UI Component Libraries\n- **Radix UI**: Headless component primitives for accessibility and customization\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **shadcn/ui**: Pre-built component library with consistent design patterns\n- **Lucide React**: Icon library for consistent iconography\n\n### Backend Services\n- **Neon Database**: Serverless PostgreSQL for production deployments\n- **Socket.IO**: Real-time WebSocket communication for live data streams\n- **Express.js**: Web server framework with middleware ecosystem\n\n### Development Tools\n- **Drizzle Kit**: Database migration and schema management\n- **ESBuild**: Fast JavaScript bundler for server-side code\n- **PostCSS**: CSS processing with Tailwind integration\n\n### Validation & Forms\n- **Zod**: Runtime schema validation for API requests and responses\n- **React Hook Form**: Form state management with validation integration\n- **Hookform Resolvers**: Zod integration for form validation\n\n### Data Fetching & State\n- **TanStack Query**: Server state management with caching and synchronization\n- **Date-fns**: Date/time manipulation for timestamp handling\n\n### Session Management\n- **connect-pg-simple**: PostgreSQL session store for user sessions\n- **Express Session**: Session middleware for authentication state","size_bytes":4769},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n          active: \"120 60% 50%\",\n          maintenance: \"45 100% 60%\",\n          error: \"0 70% 55%\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4151},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { plcConfigSchema, mockNodeData } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // PLC Management Routes\n  app.get(\"/api/plcs\", async (req, res) => {\n    try {\n      const plcs = await storage.getAllPLCs();\n      res.json(plcs);\n    } catch (error) {\n      console.error(\"Error fetching PLCs:\", error);\n      res.status(500).json({ error: \"Failed to fetch PLCs\" });\n    }\n  });\n\n  app.get(\"/api/plcs/:id\", async (req, res) => {\n    try {\n      const plc = await storage.getPLCById(req.params.id);\n      if (!plc) {\n        return res.status(404).json({ error: \"PLC not found\" });\n      }\n      res.json(plc);\n    } catch (error) {\n      console.error(\"Error fetching PLC:\", error);\n      res.status(500).json({ error: \"Failed to fetch PLC\" });\n    }\n  });\n\n  app.post(\"/api/plcs\", async (req, res) => {\n    try {\n      const config = plcConfigSchema.parse(req.body);\n      const plc = await storage.createPLC(config);\n      res.status(201).json(plc);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error(\"PLC validation error:\", error.errors);\n        return res.status(400).json({ error: \"Invalid PLC configuration\", details: error.errors });\n      }\n      console.error(\"Error creating PLC:\", error);\n      res.status(500).json({ error: \"Failed to create PLC\" });\n    }\n  });\n\n  app.put(\"/api/plcs/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const plc = await storage.updatePLC(req.params.id, updates);\n      if (!plc) {\n        return res.status(404).json({ error: \"PLC not found\" });\n      }\n      res.json(plc);\n    } catch (error) {\n      console.error(\"Error updating PLC:\", error);\n      res.status(500).json({ error: \"Failed to update PLC\" });\n    }\n  });\n\n  app.delete(\"/api/plcs/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePLC(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"PLC not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting PLC:\", error);\n      res.status(500).json({ error: \"Failed to delete PLC\" });\n    }\n  });\n\n  // PLC Connection Management\n  app.post(\"/api/plcs/:id/connect\", async (req, res) => {\n    try {\n      const plc = await storage.updatePLC(req.params.id, {\n        is_connected: true,\n        status: \"active\",\n        last_checked: new Date(),\n      });\n      if (!plc) {\n        return res.status(404).json({ error: \"PLC not found\" });\n      }\n      res.json(plc);\n    } catch (error) {\n      console.error(\"Error connecting PLC:\", error);\n      res.status(500).json({ error: \"Failed to connect PLC\" });\n    }\n  });\n\n  app.post(\"/api/plcs/:id/disconnect\", async (req, res) => {\n    try {\n      const plc = await storage.updatePLC(req.params.id, {\n        is_connected: false,\n        status: \"maintenance\",\n        last_checked: new Date(),\n      });\n      if (!plc) {\n        return res.status(404).json({ error: \"PLC not found\" });\n      }\n      res.json(plc);\n    } catch (error) {\n      console.error(\"Error disconnecting PLC:\", error);\n      res.status(500).json({ error: \"Failed to disconnect PLC\" });\n    }\n  });\n\n  // Node Data Routes\n  app.get(\"/api/plcs/:id/data\", async (req, res) => {\n    try {\n      const data = await storage.getNodeData(req.params.id);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching node data:\", error);\n      res.status(500).json({ error: \"Failed to fetch node data\" });\n    }\n  });\n\n  // JSON Upload Route\n  app.post(\"/api/upload/json\", upload.single(\"jsonFile\"), (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const fileContent = req.file.buffer.toString(\"utf-8\");\n      const json = JSON.parse(fileContent);\n      const config = plcConfigSchema.parse(json);\n      \n      res.json({ success: true, config });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid JSON configuration\", details: error.errors });\n      }\n      if (error instanceof SyntaxError) {\n        return res.status(400).json({ error: \"Invalid JSON format\" });\n      }\n      console.error(\"Error processing upload:\", error);\n      res.status(500).json({ error: \"Failed to process file\" });\n    }\n  });\n\n  // Server Status Routes\n  app.get(\"/api/servers/status\", async (req, res) => {\n    try {\n      const statuses = await storage.getServerStatuses();\n      res.json(statuses);\n    } catch (error) {\n      console.error(\"Error fetching server statuses:\", error);\n      res.status(500).json({ error: \"Failed to fetch server statuses\" });\n    }\n  });\n\n  // Data Export Route\n  app.get(\"/api/export/csv\", async (req, res) => {\n    try {\n      const { plcId } = req.query;\n      let data = mockNodeData;\n      \n      if (plcId && typeof plcId === 'string') {\n        data = await storage.getNodeData(plcId);\n      }\n\n      // Generate CSV content\n      const headers = [\"Node Name\", \"Node ID\", \"Current Value\", \"Data Type\", \"Quality\", \"Timestamp\"];\n      const csvRows = [\n        headers.join(\",\"),\n        ...data.map(item => [\n          item.node_name,\n          item.node_id,\n          item.current_value,\n          item.data_type || \"\",\n          item.quality || \"\",\n          item.timestamp.toISOString(),\n        ].join(\",\"))\n      ];\n\n      const csvContent = csvRows.join(\"\\n\");\n      \n      res.setHeader(\"Content-Type\", \"text/csv\");\n      res.setHeader(\"Content-Disposition\", `attachment; filename=\"node_data_${new Date().toISOString().split('T')[0]}.csv\"`);\n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Error exporting CSV:\", error);\n      res.status(500).json({ error: \"Failed to export data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Set up Socket.IO for real-time updates\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: \"*\",\n      methods: [\"GET\", \"POST\"],\n    },\n  });\n\n  io.on(\"connection\", (socket) => {\n    console.log(\"Client connected:\", socket.id);\n\n    // Send initial data\n    socket.emit(\"plcs\", []);\n    socket.emit(\"nodeData\", mockNodeData);\n\n    // Handle PLC subscription\n    socket.on(\"subscribePLC\", (plcId) => {\n      console.log(`Client ${socket.id} subscribed to PLC ${plcId}`);\n      socket.join(`plc-${plcId}`);\n    });\n\n    socket.on(\"unsubscribePLC\", (plcId) => {\n      console.log(`Client ${socket.id} unsubscribed from PLC ${plcId}`);\n      socket.leave(`plc-${plcId}`);\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Client disconnected:\", socket.id);\n    });\n  });\n\n  // Simulate real-time data updates\n  setInterval(() => {\n    const updatedData = mockNodeData.map(item => ({\n      ...item,\n      current_value: typeof item.current_value === 'number' \n        ? item.current_value + (Math.random() - 0.5) * 5\n        : item.current_value,\n      timestamp: new Date(),\n    }));\n\n    io.emit(\"nodeDataUpdate\", updatedData);\n  }, 1000); // Update every second\n\n  return httpServer;\n}\n","size_bytes":7378},"server/storage.ts":{"content":"import { type PLC, type PLCConfig, type NodeData, type ServerStatus, mockPLCs } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Storage interface for OPC UA Dashboard\nexport interface IStorage {\n  // PLC management\n  getAllPLCs(): Promise<PLC[]>;\n  getPLCById(id: string): Promise<PLC | undefined>;\n  createPLC(config: PLCConfig): Promise<PLC>;\n  updatePLC(id: string, updates: Partial<PLC>): Promise<PLC | undefined>;\n  deletePLC(id: string): Promise<boolean>;\n  \n  // Node data management\n  getNodeData(plcId: string): Promise<NodeData[]>;\n  updateNodeData(plcId: string, data: NodeData[]): Promise<void>;\n  \n  // Server status management\n  getServerStatuses(): Promise<ServerStatus[]>;\n  updateServerStatus(opcuaUrl: string, status: ServerStatus): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private plcs: Map<string, PLC>;\n  private nodeData: Map<string, NodeData[]>;\n  private serverStatuses: Map<string, ServerStatus>;\n\n  constructor() {\n    this.plcs = new Map();\n    this.nodeData = new Map();\n    this.serverStatuses = new Map();\n    \n    // Initialize with mock PLCs from schema (synchronous)\n    mockPLCs.forEach(plc => {\n      this.plcs.set(plc.id, plc);\n    });\n  }\n\n  async getAllPLCs(): Promise<PLC[]> {\n    return Array.from(this.plcs.values());\n  }\n\n  async getPLCById(id: string): Promise<PLC | undefined> {\n    return this.plcs.get(id);\n  }\n\n  async createPLC(config: PLCConfig): Promise<PLC> {\n    const id = randomUUID();\n    const plc: PLC = {\n      ...config,\n      id,\n      status: \"maintenance\",\n      last_checked: new Date(),\n      is_connected: false,\n      created_at: new Date(),\n    };\n    this.plcs.set(id, plc);\n    return plc;\n  }\n\n  async updatePLC(id: string, updates: Partial<PLC>): Promise<PLC | undefined> {\n    const existing = this.plcs.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    this.plcs.set(id, updated);\n    return updated;\n  }\n\n  async deletePLC(id: string): Promise<boolean> {\n    return this.plcs.delete(id);\n  }\n\n  async getNodeData(plcId: string): Promise<NodeData[]> {\n    return this.nodeData.get(plcId) || [];\n  }\n\n  async updateNodeData(plcId: string, data: NodeData[]): Promise<void> {\n    this.nodeData.set(plcId, data);\n  }\n\n  async getServerStatuses(): Promise<ServerStatus[]> {\n    return Array.from(this.serverStatuses.values());\n  }\n\n  async updateServerStatus(opcuaUrl: string, status: ServerStatus): Promise<void> {\n    this.serverStatuses.set(opcuaUrl, status);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2574},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/normalization.ts":{"content":"import type { PLCConfig, PLC, RawJSONData, RawPLCConfig } from \"./schema\";\n\n// Extract types from schema\ntype BitMapping = {\n  address: string;\n  description: string;\n  bit_position: number;\n};\n\ntype AddressMapping = {\n  plc_reg_add: string;\n  data_type: string;\n  opcua_reg_add: string;\n  description: string;\n  metadata?: {\n    bit_count: number;\n    bit_mappings: Record<string, BitMapping>;\n  };\n};\n\n// Normalized data structures for UI consumption\nexport interface NormalizedVariable {\n  id: string;\n  type: 'bool' | 'channel';\n  plc_reg_add: string;\n  opcua_reg_add: string;\n  description: string;\n  data_type: string;\n  parentId?: string; // For bit variables under channel\n  bitPosition?: number;\n  hasChildren?: boolean;\n  children?: NormalizedVariable[];\n}\n\nexport interface NormalizedPLC {\n  id: string;\n  plc_name: string;\n  plc_ip: string;\n  opcua_url: string;\n  status: \"active\" | \"maintenance\" | \"error\";\n  last_checked: Date;\n  is_connected: boolean;\n  created_at: Date;\n  variables: NormalizedVariable[];\n  registerCount: number;\n  boolCount: number;\n  channelCount: number;\n}\n\nexport interface ServerGroup {\n  serverUrl: string;\n  plcs: NormalizedPLC[];\n  connectedCount: number;\n  totalCount: number;\n  status: 'connected' | 'disconnected';\n  lastUpdated: number;\n}\n\n/**\n * Normalize a single address mapping into UI-friendly variables\n */\nfunction normalizeAddressMapping(mapping: AddressMapping): NormalizedVariable[] {\n  const baseVariable: NormalizedVariable = {\n    id: mapping.opcua_reg_add,\n    type: mapping.data_type === 'channel' ? 'channel' : 'bool',\n    plc_reg_add: mapping.plc_reg_add,\n    opcua_reg_add: mapping.opcua_reg_add,\n    description: mapping.description,\n    data_type: mapping.data_type,\n  };\n\n  // Handle simple bool variables\n  if (mapping.data_type === 'bool') {\n    return [baseVariable];\n  }\n\n  // Handle channel variables with bit mappings\n  if (mapping.data_type === 'channel' && mapping.metadata?.bit_mappings) {\n    const children: NormalizedVariable[] = [];\n    \n    // Create child variables for each bit mapping\n    Object.entries(mapping.metadata.bit_mappings).forEach(([bitKey, bitData]: [string, BitMapping]) => {\n      const childId = `${mapping.opcua_reg_add}:${bitData.bit_position}`;\n      \n      children.push({\n        id: childId,\n        type: 'bool',\n        plc_reg_add: bitData.address,\n        opcua_reg_add: `${mapping.opcua_reg_add}_bit${bitData.bit_position}`,\n        description: bitData.description,\n        data_type: 'bool',\n        parentId: mapping.opcua_reg_add,\n        bitPosition: bitData.bit_position,\n      });\n    });\n\n    // Sort children by bit position\n    children.sort((a, b) => (a.bitPosition || 0) - (b.bitPosition || 0));\n\n    // Update parent with children info\n    const parentVariable: NormalizedVariable = {\n      ...baseVariable,\n      hasChildren: true,\n      children,\n    };\n\n    return [parentVariable, ...children];\n  }\n\n  // Fallback for channel without bit mappings\n  return [{ ...baseVariable, hasChildren: false }];\n}\n\n/**\n * Normalize PLC configuration from JSON into UI-friendly structure\n */\nexport function normalizePLCConfig(json: RawJSONData): NormalizedPLC[] {\n  if (!json.plcs || !Array.isArray(json.plcs)) {\n    throw new Error('Invalid JSON structure: missing plcs array');\n  }\n\n  return json.plcs.map((plc: RawPLCConfig) => {\n    // Normalize all address mappings\n    const allVariables: NormalizedVariable[] = [];\n    let boolCount = 0;\n    let channelCount = 0;\n\n    if (plc.address_mappings && Array.isArray(plc.address_mappings)) {\n      plc.address_mappings.forEach((mapping: AddressMapping) => {\n        const normalized = normalizeAddressMapping(mapping);\n        allVariables.push(...normalized);\n\n        // Count variables by type\n        if (mapping.data_type === 'bool') {\n          boolCount++;\n        } else if (mapping.data_type === 'channel') {\n          channelCount++;\n          // Count child bits as bool variables\n          if (mapping.metadata?.bit_mappings) {\n            boolCount += Object.keys(mapping.metadata.bit_mappings).length;\n          }\n        }\n      });\n    }\n\n    const normalizedPLC: NormalizedPLC = {\n      id: Math.random().toString(36).substr(2, 9), // Generate ID if not present\n      plc_name: plc.plc_name,\n      plc_ip: plc.plc_ip,\n      opcua_url: plc.opcua_url,\n      status: \"maintenance\",\n      last_checked: new Date(),\n      is_connected: false,\n      created_at: new Date(),\n      variables: allVariables,\n      registerCount: allVariables.length,\n      boolCount,\n      channelCount,\n    };\n\n    return normalizedPLC;\n  });\n}\n\n/**\n * Group normalized PLCs by OPCUA server URL\n */\nexport function groupPLCsByServer(plcs: NormalizedPLC[]): ServerGroup[] {\n  const grouped = new Map<string, NormalizedPLC[]>();\n  \n  plcs.forEach(plc => {\n    const serverUrl = plc.opcua_url;\n    if (!grouped.has(serverUrl)) {\n      grouped.set(serverUrl, []);\n    }\n    grouped.get(serverUrl)!.push(plc);\n  });\n  \n  return Array.from(grouped.entries()).map(([url, serverPlcs]) => ({\n    serverUrl: url,\n    plcs: serverPlcs,\n    connectedCount: serverPlcs.filter(p => p.is_connected).length,\n    totalCount: serverPlcs.length,\n    status: serverPlcs.some(p => p.is_connected) ? \"connected\" : \"disconnected\",\n    lastUpdated: Math.max(...serverPlcs.map(p => new Date(p.last_checked ?? 0).getTime())),\n  }));\n}\n\n/**\n * Filter variables by search query\n */\nexport function filterVariables(\n  variables: NormalizedVariable[], \n  searchQuery: string\n): NormalizedVariable[] {\n  if (!searchQuery.trim()) return variables;\n  \n  const query = searchQuery.toLowerCase();\n  \n  return variables.filter(variable => \n    variable.plc_reg_add.toLowerCase().includes(query) ||\n    variable.opcua_reg_add.toLowerCase().includes(query) ||\n    variable.description.toLowerCase().includes(query)\n  );\n}\n\n/**\n * Get parent variables (channel types) for expandable table\n */\nexport function getParentVariables(variables: NormalizedVariable[]): NormalizedVariable[] {\n  return variables.filter(v => !v.parentId);\n}\n\n/**\n * Get child variables for a specific parent\n */\nexport function getChildVariables(\n  variables: NormalizedVariable[], \n  parentId: string\n): NormalizedVariable[] {\n  return variables.filter(v => v.parentId === parentId);\n}\n\n/**\n * Convert normalized PLC back to API-compatible format\n */\nexport function denormalizePLC(normalizedPLC: NormalizedPLC): RawPLCConfig {\n  // Extract unique parent variables to reconstruct address_mappings\n  const parentVariables = getParentVariables(normalizedPLC.variables);\n  \n  const address_mappings = parentVariables.map(variable => {\n    const mapping: AddressMapping = {\n      plc_reg_add: variable.plc_reg_add,\n      data_type: variable.data_type,\n      opcua_reg_add: variable.opcua_reg_add,\n      description: variable.description,\n    };\n\n    // Add metadata for channel types\n    if (variable.type === 'channel' && variable.hasChildren) {\n      const children = getChildVariables(normalizedPLC.variables, variable.id);\n      const bit_mappings: Record<string, BitMapping> = {};\n      \n      children.forEach((child, index) => {\n        const bitKey = `bit_${(child.bitPosition ?? 0).toString().padStart(2, '0')}`;\n        bit_mappings[bitKey] = {\n          address: child.plc_reg_add,\n          description: child.description,\n          bit_position: child.bitPosition ?? 0,\n        };\n      });\n\n      mapping.metadata = {\n        bit_count: children.length,\n        bit_mappings,\n      };\n    }\n\n    return mapping;\n  });\n\n  const result: RawPLCConfig = {\n    plc_name: normalizedPLC.plc_name,\n    plc_ip: normalizedPLC.plc_ip,\n    opcua_url: normalizedPLC.opcua_url,\n    address_mappings: address_mappings,\n  };\n  \n  return result;\n}","size_bytes":7734},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Raw JSON PLC Configuration Schema (as uploaded)\nexport const rawPLCConfigSchema = z.object({\n  plc_name: z.string().min(1, \"PLC name is required\"),\n  plc_ip: z.string().ip(\"Invalid IP address\"),\n  opcua_url: z.string().url(\"Invalid OPC UA URL\"),\n  address_mappings: z.array(z.object({\n    plc_reg_add: z.string(),\n    data_type: z.string(), // Accept any string data type (word, bool, channel, udint, etc.)\n    opcua_reg_add: z.string(),\n    description: z.string(),\n    metadata: z.object({\n      bit_count: z.number(),\n      bit_mappings: z.record(z.object({\n        address: z.string(),\n        description: z.string(),\n        bit_position: z.number(),\n      })),\n    }).optional(),\n  })),\n});\n\n// Raw JSON file structure\nexport const rawJSONSchema = z.object({\n  plcs: z.array(rawPLCConfigSchema),\n});\n\n// Internal PLC Configuration Schema (for API)\nexport const plcConfigSchema = z.object({\n  plc_name: z.string().min(1, \"PLC name is required\"),\n  plc_no: z.number().int().positive(\"PLC number must be positive\").optional(),\n  plc_ip: z.string().ip(\"Invalid IP address\"),\n  opcua_url: z.string().url(\"Invalid OPC UA URL\"),\n  address_mappings: z.array(z.object({\n    node_name: z.string(),\n    node_id: z.string(),\n    description: z.string().optional(),\n    data_type: z.string().optional(),\n  })),\n});\n\n// PLC with status and runtime info\nexport const plcSchema = plcConfigSchema.extend({\n  id: z.string(),\n  status: z.enum([\"active\", \"maintenance\", \"error\"]),\n  last_checked: z.date(),\n  is_connected: z.boolean(),\n  created_at: z.date(),\n});\n\n// OPC UA Node Data\nexport const nodeDataSchema = z.object({\n  node_id: z.string(),\n  node_name: z.string(),\n  current_value: z.any(),\n  timestamp: z.date(),\n  quality: z.string().optional(),\n  data_type: z.string().optional(),\n});\n\n// Server Connection Status\nexport const serverStatusSchema = z.object({\n  opcua_url: z.string(),\n  is_connected: z.boolean(),\n  status: z.enum([\"active\", \"inactive\", \"error\"]),\n  last_update: z.date(),\n  node_count: z.number().optional(),\n});\n\nexport type RawPLCConfig = z.infer<typeof rawPLCConfigSchema>;\nexport type RawJSONData = z.infer<typeof rawJSONSchema>;\nexport type PLCConfig = z.infer<typeof plcConfigSchema>;\nexport type PLC = z.infer<typeof plcSchema>;\nexport type NodeData = z.infer<typeof nodeDataSchema>;\nexport type ServerStatus = z.infer<typeof serverStatusSchema>;\nexport type PLCStatus = \"active\" | \"maintenance\" | \"error\";\nexport type ConnectionStatus = \"active\" | \"inactive\" | \"error\";\n\n// Language types\nexport type Language = \"en\" | \"jp\";\n\n// Mock data for development\nexport const mockPLCs: PLC[] = [\n  {\n    id: \"1\",\n    plc_name: \"Production Line A Controller\",\n    plc_no: 101,\n    plc_ip: \"192.168.1.10\",\n    opcua_url: \"opc.tcp://192.168.1.10:4840\",\n    address_mappings: [\n      { node_name: \"Temperature_01\", node_id: \"ns=2;i=1001\", description: \"Main temperature sensor\", data_type: \"Float\" },\n      { node_name: \"Pressure_01\", node_id: \"ns=2;i=1002\", description: \"System pressure\", data_type: \"Float\" },\n      { node_name: \"Motor_Speed\", node_id: \"ns=2;i=1003\", description: \"Motor RPM\", data_type: \"Int32\" },\n    ],\n    status: \"active\",\n    last_checked: new Date(),\n    is_connected: true,\n    created_at: new Date(),\n  },\n  {\n    id: \"2\",\n    plc_name: \"Packaging Unit B\",\n    plc_no: 102,\n    plc_ip: \"192.168.1.11\",\n    opcua_url: \"opc.tcp://192.168.1.11:4840\",\n    address_mappings: [\n      { node_name: \"Conveyor_Speed\", node_id: \"ns=2;i=2001\", description: \"Conveyor belt speed\", data_type: \"Float\" },\n      { node_name: \"Package_Count\", node_id: \"ns=2;i=2002\", description: \"Total packages\", data_type: \"Int32\" },\n    ],\n    status: \"maintenance\",\n    last_checked: new Date(),\n    is_connected: false,\n    created_at: new Date(),\n  },\n  {\n    id: \"3\",\n    plc_name: \"Quality Control System\",\n    plc_no: 103,\n    plc_ip: \"192.168.1.12\",\n    opcua_url: \"opc.tcp://192.168.1.12:4840\",\n    address_mappings: [\n      { node_name: \"Test_Result\", node_id: \"ns=2;i=3001\", description: \"Quality test result\", data_type: \"Boolean\" },\n      { node_name: \"Error_Count\", node_id: \"ns=2;i=3002\", description: \"Error counter\", data_type: \"Int32\" },\n    ],\n    status: \"error\",\n    last_checked: new Date(),\n    is_connected: false,\n    created_at: new Date(),\n  },\n];\n\nexport const mockNodeData: NodeData[] = [\n  {\n    node_id: \"ns=2;i=1001\",\n    node_name: \"Temperature_01\",\n    current_value: 23.5,\n    timestamp: new Date(),\n    quality: \"Good\",\n    data_type: \"Float\",\n  },\n  {\n    node_id: \"ns=2;i=1002\",\n    node_name: \"Pressure_01\",\n    current_value: 1.2,\n    timestamp: new Date(),\n    quality: \"Good\",\n    data_type: \"Float\",\n  },\n  {\n    node_id: \"ns=2;i=1003\",\n    node_name: \"Motor_Speed\",\n    current_value: 1450,\n    timestamp: new Date(),\n    quality: \"Good\",\n    data_type: \"Int32\",\n  },\n];\n","size_bytes":4855},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport AppLayout from \"@/components/AppLayout\";\nimport Dashboard from \"@/components/Dashboard\";\nimport ServersPage from \"@/components/ServersPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <AppLayout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/servers\" component={ServersPage} />\n        <Route component={NotFound} />\n      </Switch>\n    </AppLayout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <LanguageProvider>\n          <Toaster />\n          <Router />\n        </LanguageProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1040},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 20% 98%;\n  --foreground: 210 20% 15%;\n  --border: 210 15% 92%;\n  --card: 210 15% 95%;\n  --card-foreground: 210 20% 15%;\n  --card-border: 210 15% 90%;\n  --sidebar: 210 15% 93%;\n  --sidebar-foreground: 210 20% 15%;\n  --sidebar-border: 210 15% 88%;\n  --sidebar-primary: 210 100% 60%;\n  --sidebar-primary-foreground: 210 20% 98%;\n  --sidebar-accent: 210 15% 88%;\n  --sidebar-accent-foreground: 210 20% 15%;\n  --sidebar-ring: 210 100% 60%;\n  --popover: 210 15% 92%;\n  --popover-foreground: 210 20% 15%;\n  --popover-border: 210 15% 86%;\n  --primary: 210 100% 60%;\n  --primary-foreground: 210 20% 98%;\n  --secondary: 210 15% 87%;\n  --secondary-foreground: 210 20% 15%;\n  --muted: 210 10% 90%;\n  --muted-foreground: 210 10% 45%;\n  --accent: 210 10% 88%;\n  --accent-foreground: 210 20% 15%;\n  --destructive: 0 70% 55%;\n  --destructive-foreground: 0 0% 98%;\n  --input: 210 15% 85%;\n  --ring: 210 100% 60%;\n  --chart-1: 210 100% 45%;\n  --chart-2: 120 60% 40%;\n  --chart-3: 45 100% 45%;\n  --chart-4: 280 65% 50%;\n  --chart-5: 15 80% 50%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 20% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 20% 15% / 0.08);\n  --shadow-sm: 0px 1px 2px 0px hsl(210 20% 15% / 0.05), 0px 2px 4px -1px hsl(210 20% 15% / 0.08);\n  --shadow: 0px 1px 3px 0px hsl(210 20% 15% / 0.08), 0px 4px 6px -1px hsl(210 20% 15% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(210 20% 15% / 0.08), 0px 2px 4px -1px hsl(210 20% 15% / 0.05);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 20% 15% / 0.08), 0px 4px 6px -2px hsl(210 20% 15% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 20% 15% / 0.08), 0px 10px 10px -5px hsl(210 20% 15% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 20% 15% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 20% 8%;\n  --foreground: 210 10% 95%;\n  --border: 210 15% 12%;\n  --card: 210 15% 12%;\n  --card-foreground: 210 10% 95%;\n  --card-border: 210 15% 16%;\n  --sidebar: 210 15% 10%;\n  --sidebar-foreground: 210 10% 95%;\n  --sidebar-border: 210 15% 14%;\n  --sidebar-primary: 210 100% 60%;\n  --sidebar-primary-foreground: 210 20% 8%;\n  --sidebar-accent: 210 15% 14%;\n  --sidebar-accent-foreground: 210 10% 95%;\n  --sidebar-ring: 210 100% 60%;\n  --popover: 210 15% 14%;\n  --popover-foreground: 210 10% 95%;\n  --popover-border: 210 15% 18%;\n  --primary: 210 100% 60%;\n  --primary-foreground: 210 20% 8%;\n  --secondary: 210 15% 16%;\n  --secondary-foreground: 210 10% 95%;\n  --muted: 210 10% 11%;\n  --muted-foreground: 210 10% 70%;\n  --accent: 210 10% 13%;\n  --accent-foreground: 210 10% 95%;\n  --destructive: 0 70% 55%;\n  --destructive-foreground: 210 10% 95%;\n  --input: 210 15% 18%;\n  --ring: 210 100% 60%;\n  --chart-1: 210 100% 65%;\n  --chart-2: 120 60% 60%;\n  --chart-3: 45 100% 65%;\n  --chart-4: 280 65% 65%;\n  --chart-5: 15 80% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 20% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 20% 0% / 0.20);\n  --shadow-sm: 0px 1px 2px 0px hsl(210 20% 0% / 0.15), 0px 2px 4px -1px hsl(210 20% 0% / 0.20);\n  --shadow: 0px 1px 3px 0px hsl(210 20% 0% / 0.20), 0px 4px 6px -1px hsl(210 20% 0% / 0.25);\n  --shadow-md: 0px 4px 6px -1px hsl(210 20% 0% / 0.20), 0px 2px 4px -1px hsl(210 20% 0% / 0.15);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 20% 0% / 0.20), 0px 4px 6px -2px hsl(210 20% 0% / 0.15);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 20% 0% / 0.20), 0px 10px 10px -5px hsl(210 20% 0% / 0.12);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 20% 0% / 0.30);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9843},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppLayout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  SidebarProvider,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\";\nimport { Plus, Search, LayoutDashboard, Server } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { AppSidebar } from \"./AppSidebar\";\nimport LanguageSwitcher from \"./LanguageSwitcher\";\nimport JsonUploader from \"./JsonUploader\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { api } from \"@/lib/api\";\nimport { socketManager } from \"@/lib/socket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type PLCConfig, type PLC, type NodeData } from \"@shared/schema\";\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AppLayout({ children }: AppLayoutProps) {\n  const [selectedPLCs, setSelectedPLCs] = useState<Set<string>>(new Set());\n  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);\n  const [globalSearch, setGlobalSearch] = useState(\"\");\n  const [nodeData, setNodeData] = useState<NodeData[]>([]);\n  \n  const [location, navigate] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  // Get current page from route\n  const currentPage = location === '/servers' ? 'servers' : 'dashboard';\n\n  // Fetch PLCs\n  const { data: plcs = [], isLoading, error } = useQuery({\n    queryKey: ['api', 'plcs'],\n  });\n\n  // Connect PLC mutation\n  const connectMutation = useMutation({\n    mutationFn: api.connectPLC,\n    onSuccess: (updatedPLC) => {\n      queryClient.invalidateQueries({ queryKey: ['api', 'plcs'] });\n      setSelectedPLCs(prev => new Set(Array.from(prev).concat(updatedPLC.id)));\n      socketManager.subscribeToPLC(updatedPLC.id);\n      toast({\n        title: t(\"serverConnected\"),\n        description: `${t(\"success\")}: ${updatedPLC.plc_name}`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"connectionFailed\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Disconnect PLC mutation\n  const disconnectMutation = useMutation({\n    mutationFn: api.disconnectPLC,\n    onSuccess: (updatedPLC) => {\n      queryClient.invalidateQueries({ queryKey: ['api', 'plcs'] });\n      setSelectedPLCs(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(updatedPLC.id);\n        return newSet;\n      });\n      socketManager.unsubscribeFromPLC(updatedPLC.id);\n      toast({\n        title: t(\"serverDisconnected\"),\n        description: `${t(\"disconnected\")}: ${updatedPLC.plc_name}`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"connectionFailed\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create PLC mutation\n  const createMutation = useMutation({\n    mutationFn: api.createPLC,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['api', 'plcs'] });\n      toast({\n        title: t(\"plcAdded\"),\n        description: t(\"plcAddedSuccess\"),\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"plcAddFailed\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete PLC mutation\n  const deleteMutation = useMutation({\n    mutationFn: api.deletePLC,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['api', 'plcs'] });\n      toast({\n        title: t(\"plcDeleted\"),\n        description: t(\"plcDeletedSuccess\"),\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"plcDeleteFailed\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // WebSocket connection\n  useEffect(() => {\n    const socket = socketManager.connect();\n\n    socket.on(\"nodeDataUpdate\", (data: NodeData[]) => {\n      setNodeData(data);\n    });\n\n    socket.on(\"plcs\", (data: PLC[]) => {\n      queryClient.setQueryData(['api', 'plcs'], data);\n    });\n\n    return () => {\n      socketManager.disconnect();\n    };\n  }, [queryClient]);\n\n  const handleConfigUploaded = (config: PLCConfig) => {\n    createMutation.mutate(config);\n    setIsUploadDialogOpen(false);\n  };\n\n  const handleConnectPLC = (plcId: string) => {\n    connectMutation.mutate(plcId);\n  };\n\n  const handleDisconnectPLC = (plcId: string) => {\n    disconnectMutation.mutate(plcId);\n  };\n\n  const handleDeletePLC = (plcId: string) => {\n    // Also disconnect if currently connected\n    if (selectedPLCs.has(plcId)) {\n      setSelectedPLCs(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(plcId);\n        return newSet;\n      });\n      socketManager.unsubscribeFromPLC(plcId);\n    }\n    deleteMutation.mutate(plcId);\n  };\n\n  // Custom sidebar width for better content layout\n  const style = {\n    \"--sidebar-width\": \"20rem\",       // 320px for better content\n    \"--sidebar-width-icon\": \"4rem\",   // default icon width\n  } as React.CSSProperties;\n\n  const handleTabChange = (value: string) => {\n    if (value === 'servers') {\n      navigate('/servers');\n    } else {\n      navigate('/');\n    }\n  };\n\n  return (\n    <SidebarProvider style={style}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar\n          plcs={plcs}\n          isLoading={isLoading}\n          selectedPLCs={selectedPLCs}\n          onConnect={handleConnectPLC}\n          onDisconnect={handleDisconnectPLC}\n          onRefresh={(id) => console.log(`Refresh PLC ${id}`)}\n          onConfigure={(id) => console.log(`Configure PLC ${id}`)}\n          onDelete={handleDeletePLC}\n        />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n            <div className=\"flex items-center gap-4\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              \n              <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" data-testid=\"button-add-new\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    {t(\"addNew\")}\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>{t(\"uploadJsonConfig\")}</DialogTitle>\n                  </DialogHeader>\n                  <JsonUploader\n                    onConfigUploaded={handleConfigUploaded}\n                    onClose={() => setIsUploadDialogOpen(false)}\n                  />\n                </DialogContent>\n              </Dialog>\n              \n              <Tabs value={currentPage} onValueChange={handleTabChange}>\n                <TabsList data-testid=\"tabs-navigation\">\n                  <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">\n                    <LayoutDashboard className=\"w-4 h-4 mr-2\" />\n                    {t(\"dashboard\")}\n                  </TabsTrigger>\n                  <TabsTrigger value=\"servers\" data-testid=\"tab-servers\">\n                    <Server className=\"w-4 h-4 mr-2\" />\n                    {t(\"opcuaServers\")}\n                  </TabsTrigger>\n                </TabsList>\n              </Tabs>\n\n              {currentPage === 'dashboard' && (\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    placeholder={t(\"search\")}\n                    value={globalSearch}\n                    onChange={(e) => setGlobalSearch(e.target.value)}\n                    className=\"w-64\"\n                    data-testid=\"input-global-search\"\n                  />\n                  <Search className=\"w-4 h-4 text-muted-foreground\" />\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <LanguageSwitcher />\n            </div>\n          </header>\n\n          <main className=\"flex-1 overflow-hidden\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":8434},"client/src/components/AppSidebar.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Activity, \n  Search, \n  Settings, \n  RefreshCw, \n  Wifi,\n  WifiOff,\n  ArrowUpDown,\n  Trash2,\n  MoreHorizontal\n} from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport type { PLC } from \"@shared/schema\";\n\ninterface AppSidebarProps {\n  plcs: PLC[];\n  isLoading?: boolean;\n  selectedPLCs: Set<string>;\n  onConnect: (plcId: string) => void;\n  onDisconnect: (plcId: string) => void;\n  onRefresh: (plcId: string) => void;\n  onConfigure: (plcId: string) => void;\n  onDelete: (plcId: string) => void;\n}\n\nexport function AppSidebar({ \n  plcs, \n  isLoading = false,\n  selectedPLCs, \n  onConnect, \n  onDisconnect, \n  onRefresh, \n  onConfigure,\n  onDelete\n}: AppSidebarProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"asc\");\n\n  const filteredAndSortedPLCs = plcs\n    .filter(plc => \n      plc.plc_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (plc.plc_no?.toString() || '').includes(searchTerm) ||\n      plc.plc_ip.includes(searchTerm)\n    )\n    .sort((a, b) => {\n      const aNum = a.plc_no || 0;\n      const bNum = b.plc_no || 0;\n      const comparison = sortOrder === \"asc\" ? aNum - bNum : bNum - aNum;\n      return comparison;\n    });\n\n\n  const connectedCount = plcs.filter(plc => selectedPLCs.has(plc.id)).length;\n  const activeCount = plcs.filter(plc => plc.status === \"active\").length;\n  const errorCount = plcs.filter(plc => plc.status === \"error\").length;\n\n  const handleToggleConnection = (plc: PLC) => {\n    if (selectedPLCs.has(plc.id)) {\n      onDisconnect(plc.id);\n    } else {\n      onConnect(plc.id);\n    }\n  };\n\n  const truncateName = (name: string) => {\n    return name.length > 16 ? `${name.substring(0, 16)}...` : name;\n  };\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5 text-primary\" />\n            <span className=\"font-semibold text-lg\">PLC Monitor</span>\n          </div>\n          \n          <div className=\"grid grid-cols-3 gap-2 text-xs\">\n            <div className=\"text-center p-2 rounded-md bg-card\">\n              <div className=\"font-mono font-semibold text-green-600\">{connectedCount}</div>\n              <div className=\"text-muted-foreground\">Connected</div>\n            </div>\n            <div className=\"text-center p-2 rounded-md bg-card\">\n              <div className=\"font-mono font-semibold text-blue-600\">{activeCount}</div>\n              <div className=\"text-muted-foreground\">Active</div>\n            </div>\n            <div className=\"text-center p-2 rounded-md bg-card\">\n              <div className=\"font-mono font-semibold text-red-600\">{errorCount}</div>\n              <div className=\"text-muted-foreground\">Errors</div>\n            </div>\n          </div>\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"flex items-center justify-between\">\n            <span>PLCs ({filteredAndSortedPLCs.length})</span>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setSortOrder(prev => prev === \"asc\" ? \"desc\" : \"asc\")}\n              data-testid=\"button-sort-sidebar\"\n            >\n              <ArrowUpDown className=\"h-3 w-3\" />\n            </Button>\n          </SidebarGroupLabel>\n          \n          <div className=\"px-2 pb-2\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 h-3 w-3 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-7 h-8 text-xs\"\n                data-testid=\"input-search-sidebar\"\n              />\n            </div>\n          </div>\n          \n          <SidebarGroupContent>\n            <ScrollArea className=\"h-[calc(100vh-280px)]\">\n              <SidebarMenu>\n                {filteredAndSortedPLCs.map((plc) => {\n                  const isConnected = selectedPLCs.has(plc.id);\n                  const displayName = `P_${plc.plc_no}_${truncateName(plc.plc_name)}`;\n                  const fullName = `P_${plc.plc_no}_${plc.plc_name}`;\n                  \n                  return (\n                    <SidebarMenuItem key={plc.id}>\n                      <Tooltip>\n                        <TooltipTrigger asChild>\n                          <div className=\"w-full\">\n                            <SidebarMenuButton \n                              className={`w-full justify-between p-3 h-auto ${\n                                isConnected ? 'bg-sidebar-accent' : ''\n                              }`}\n                              onClick={() => handleToggleConnection(plc)}\n                              data-testid={`sidebar-plc-${plc.id}`}\n                            >\n                              <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n                                <StatusIndicator status={plc.status} size=\"sm\" />\n                                <div className=\"min-w-0 flex-1\">\n                                  <p className=\"font-mono text-xs font-medium truncate\">\n                                    {displayName}\n                                  </p>\n                                  <p className=\"font-mono text-xs text-muted-foreground\">\n                                    {plc.plc_ip}\n                                  </p>\n                                </div>\n                              </div>\n                              \n                              <div className=\"flex items-center gap-1 shrink-0\">\n                                {isConnected ? (\n                                  <Wifi className={`h-3 w-3 ${\n                                    plc.status === 'maintenance' ? 'text-yellow-600' : 'text-green-600'\n                                  }`} />\n                                ) : (\n                                  <WifiOff className=\"h-3 w-3 text-muted-foreground\" />\n                                )}\n                              </div>\n                            </SidebarMenuButton>\n                            \n                            {isConnected && (\n                              <div className=\"px-3 pb-2\">\n                                <Separator className=\"mb-2\" />\n                                <div className=\"flex gap-1\">\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\" \n                                    className=\"h-6 text-xs\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      onRefresh(plc.id);\n                                    }}\n                                    data-testid={`button-refresh-sidebar-${plc.id}`}\n                                  >\n                                    <RefreshCw className=\"h-3 w-3\" />\n                                  </Button>\n                                  <DropdownMenu>\n                                    <DropdownMenuTrigger asChild>\n                                      <Button \n                                        variant=\"ghost\" \n                                        size=\"sm\" \n                                        className=\"h-6 text-xs\"\n                                        onClick={(e) => {\n                                          e.stopPropagation();\n                                        }}\n                                        data-testid={`button-configure-sidebar-${plc.id}`}\n                                      >\n                                        <MoreHorizontal className=\"h-3 w-3\" />\n                                      </Button>\n                                    </DropdownMenuTrigger>\n                                    <DropdownMenuContent align=\"end\" className=\"w-40\">\n                                      <DropdownMenuItem\n                                        onClick={(e) => {\n                                          e.stopPropagation();\n                                          onConfigure(plc.id);\n                                        }}\n                                        data-testid={`menu-configure-${plc.id}`}\n                                      >\n                                        <Settings className=\"h-3 w-3 mr-2\" />\n                                        Configure\n                                      </DropdownMenuItem>\n                                      <DropdownMenuItem\n                                        onClick={(e) => {\n                                          e.stopPropagation();\n                                          onDelete(plc.id);\n                                        }}\n                                        className=\"text-red-600 focus:text-red-600\"\n                                        data-testid={`menu-delete-${plc.id}`}\n                                      >\n                                        <Trash2 className=\"h-3 w-3 mr-2\" />\n                                        Delete PLC\n                                      </DropdownMenuItem>\n                                    </DropdownMenuContent>\n                                  </DropdownMenu>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </TooltipTrigger>\n                        {plc.plc_name.length > 16 && (\n                          <TooltipContent side=\"right\">\n                            <p className=\"font-mono text-xs\">{fullName}</p>\n                            <p className=\"font-mono text-xs text-muted-foreground\">\n                              {plc.opcua_url}\n                            </p>\n                          </TooltipContent>\n                        )}\n                      </Tooltip>\n                    </SidebarMenuItem>\n                  );\n                })}\n              </SidebarMenu>\n              \n              {isLoading ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p className=\"text-xs\">Loading PLCs...</p>\n                </div>\n              ) : filteredAndSortedPLCs.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p className=\"text-xs\">No PLCs found</p>\n                  <p className=\"text-xs mt-1\">\n                    {searchTerm ? \"Try different search terms\" : \"Add new PLCs to get started\"}\n                  </p>\n                </div>\n              ) : null}\n            </ScrollArea>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":11611},"client/src/components/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport EnhancedVariablesTable from \"./EnhancedVariablesTable\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type NodeData, type PLC } from \"@shared/schema\";\nimport { type NormalizedPLC, type NormalizedVariable } from \"@shared/normalization\";\n\nexport default function Dashboard() {\n  const [nodeData, setNodeData] = useState<NodeData[]>([]);\n  \n  const [location] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  // Parse plcId from query parameters\n  const searchParams = new URLSearchParams(location.split('?')[1] || '');\n  const selectedPlcId = searchParams.get('plcId');\n\n  // Fetch PLCs\n  const { data: plcs = [], isLoading } = useQuery({\n    queryKey: [\"/api/plcs\"],\n    queryFn: api.getAllPLCs,\n  });\n\n  const connectedPLCs = plcs.filter(plc => plc.is_connected);\n  \n  // Select PLC: either from URL param or first connected PLC\n  const selectedPLC = selectedPlcId \n    ? plcs.find(p => p.id === selectedPlcId) \n    : connectedPLCs.length > 0 ? connectedPLCs[0] : null;\n\n  // Convert regular PLC to NormalizedPLC with mock variables for testing\n  const createMockNormalizedPLC = (plc: PLC): NormalizedPLC => {\n    const mockVariables: NormalizedVariable[] = [\n      // Channel variable with children\n      {\n        id: `${plc.id}_ch1`,\n        type: 'channel',\n        plc_reg_add: 'D100',\n        opcua_reg_add: 'ns=2;i=1001',\n        description: 'Motor Control Status Register',\n        data_type: 'channel',\n        hasChildren: true,\n      },\n      // Child bit variables\n      {\n        id: `${plc.id}_ch1_bit0`,\n        type: 'bool',\n        plc_reg_add: 'D100.0',\n        opcua_reg_add: 'ns=2;i=1001.0',\n        description: 'Motor Running Status',\n        data_type: 'bool',\n        parentId: `${plc.id}_ch1`,\n        bitPosition: 0,\n      },\n      {\n        id: `${plc.id}_ch1_bit1`,\n        type: 'bool',\n        plc_reg_add: 'D100.1',\n        opcua_reg_add: 'ns=2;i=1001.1',\n        description: 'Motor Alarm Status',\n        data_type: 'bool',\n        parentId: `${plc.id}_ch1`,\n        bitPosition: 1,\n      },\n      {\n        id: `${plc.id}_ch1_bit2`,\n        type: 'bool',\n        plc_reg_add: 'D100.2',\n        opcua_reg_add: 'ns=2;i=1001.2',\n        description: 'Emergency Stop Active',\n        data_type: 'bool',\n        parentId: `${plc.id}_ch1`,\n        bitPosition: 2,\n      },\n      // Another channel variable\n      {\n        id: `${plc.id}_ch2`,\n        type: 'channel',\n        plc_reg_add: 'D101',\n        opcua_reg_add: 'ns=2;i=1002',\n        description: 'Temperature Sensor Data',\n        data_type: 'channel',\n        hasChildren: true,\n      },\n      // Child variables for temperature\n      {\n        id: `${plc.id}_ch2_bit0`,\n        type: 'bool',\n        plc_reg_add: 'D101.0',\n        opcua_reg_add: 'ns=2;i=1002.0',\n        description: 'Temperature High Warning',\n        data_type: 'bool',\n        parentId: `${plc.id}_ch2`,\n        bitPosition: 0,\n      },\n      {\n        id: `${plc.id}_ch2_bit1`,\n        type: 'bool',\n        plc_reg_add: 'D101.1',\n        opcua_reg_add: 'ns=2;i=1002.1',\n        description: 'Temperature Critical Alert',\n        data_type: 'bool',\n        parentId: `${plc.id}_ch2`,\n        bitPosition: 1,\n      },\n      // Standalone bool variables\n      {\n        id: `${plc.id}_bool1`,\n        type: 'bool',\n        plc_reg_add: 'M10',\n        opcua_reg_add: 'ns=2;i=2001',\n        description: 'Manual Override Enable',\n        data_type: 'bool',\n      },\n      {\n        id: `${plc.id}_bool2`,\n        type: 'bool',\n        plc_reg_add: 'M11',\n        opcua_reg_add: 'ns=2;i=2002',\n        description: 'Maintenance Mode Active',\n        data_type: 'bool',\n      },\n    ];\n\n    return {\n      id: plc.id,\n      plc_name: plc.plc_name,\n      plc_ip: plc.plc_ip,\n      opcua_url: plc.opcua_url,\n      status: plc.status,\n      last_checked: plc.last_checked,\n      is_connected: plc.is_connected,\n      created_at: plc.created_at,\n      variables: mockVariables,\n      registerCount: mockVariables.length,\n      boolCount: mockVariables.filter(v => v.type === 'bool').length,\n      channelCount: mockVariables.filter(v => v.type === 'channel').length,\n    };\n  };\n\n  const normalizedSelectedPLC = selectedPLC ? createMockNormalizedPLC(selectedPLC) : null;\n  \n  // Debug logging (cleaned up for production)\n  // console.log('Selected PLC:', selectedPLC);\n  // console.log('Normalized PLC:', normalizedSelectedPLC);\n  // console.log('Variables count:', normalizedSelectedPLC?.variables?.length || 0);\n\n  const handleExportCSV = async () => {\n    try {\n      const blob = await api.exportCSV();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `node_data_${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Export Successful\",\n        description: \"CSV file has been downloaded\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export CSV data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {selectedPLC && (\n        <div className=\"p-6 border-b bg-muted/50\">\n          <div className=\"space-y-2\">\n            <h2 className=\"text-2xl font-bold\" data-testid=\"text-plc-name\">\n              {selectedPLC.plc_name}\n            </h2>\n            <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n              <span data-testid=\"text-plc-ip\">\n                <strong>IP:</strong> {selectedPLC.plc_ip}\n              </span>\n              <span data-testid=\"text-opcua-url\">\n                <strong>OPCUA URL:</strong> {selectedPLC.opcua_url}\n              </span>\n              <span data-testid=\"text-register-count\">\n                <strong>Registers:</strong> {normalizedSelectedPLC?.registerCount || 0}\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"p-6 border-b\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-dashboard-title\">\n            {selectedPLC ? `${selectedPLC.plc_name} Variables` : \"OPC UA Dashboard\"}\n          </h1>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\" data-testid=\"text-plcs-connected\">\n              {connectedPLCs.length}/{plcs.length} PLCs Connected\n            </div>\n            <div className=\"text-sm text-muted-foreground\" data-testid=\"text-last-updated\">\n              {t(\"lastUpdated\")}: {new Date().toLocaleTimeString()}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-hidden\">\n        {connectedPLCs.length > 0 || selectedPLC ? (\n          <EnhancedVariablesTable \n            plc={normalizedSelectedPLC || undefined}\n            onExportCSV={handleExportCSV}\n            onRefresh={() => {\n              queryClient.invalidateQueries({ queryKey: [\"/api/plcs\"] });\n              toast({\n                title: t(\"success\"),\n                description: t(\"dataRefreshed\"),\n              });\n            }}\n          />\n        ) : (\n          <div className=\"text-center py-24 text-muted-foreground\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-xl font-medium\">\n                {isLoading ? \"Loading PLCs...\" : plcs.length === 0 ? \"No PLCs Available\" : \"No PLCs Connected\"}\n              </h3>\n              <p className=\"text-sm max-w-md mx-auto\">\n                {isLoading ? \"Please wait while we load your PLC configurations...\" :\n                 plcs.length === 0 ? \"Add new PLC configurations using the \\\"Add New\\\" button to get started.\" :\n                 \"Connect to one or more PLCs from the sidebar to start monitoring live data.\"}\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8342},"client/src/components/JsonUploader.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Upload, FileText, CheckCircle, AlertCircle, X } from \"lucide-react\";\nimport { type PLCConfig, type RawJSONData, rawJSONSchema } from \"@shared/schema\";\nimport { normalizePLCConfig } from \"@shared/normalization\";\nimport { api } from \"@/lib/api\";\n\ninterface JsonUploaderProps {\n  onConfigUploaded: (config: PLCConfig) => void;\n  onClose?: () => void;\n}\n\nexport default function JsonUploader({ onConfigUploaded, onClose }: JsonUploaderProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [uploadedConfig, setUploadedConfig] = useState<PLCConfig | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const processFile = useCallback(async (file: File) => {\n    setIsProcessing(true);\n    setError(null);\n    \n    try {\n      const text = await file.text();\n      const json = JSON.parse(text);\n      const validatedData = rawJSONSchema.parse(json);\n      const normalizedPLCs = normalizePLCConfig(validatedData);\n      \n      // For now, take the first PLC for single config handling\n      const firstNormalizedPLC = normalizedPLCs[0];\n      if (firstNormalizedPLC) {\n        const apiConfig: PLCConfig = {\n          plc_name: firstNormalizedPLC.plc_name,\n          // Only include plc_no if it's a positive number, otherwise omit it (it's optional)\n          ...(firstNormalizedPLC.plc_no && firstNormalizedPLC.plc_no > 0 ? { plc_no: firstNormalizedPLC.plc_no } : {}),\n          plc_ip: firstNormalizedPLC.plc_ip,\n          opcua_url: firstNormalizedPLC.opcua_url,\n          address_mappings: firstNormalizedPLC.variables\n            .filter(v => !v.parentId) // Only parent variables\n            .map(v => ({\n              node_name: v.opcua_reg_add,\n              node_id: v.id,\n              description: v.description || undefined,\n              data_type: v.data_type || undefined,\n            })),\n        };\n        \n        setUploadedConfig(apiConfig);\n        console.log('JSON config validated and normalized successfully:', apiConfig);\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        setError(err.message);\n      } else {\n        setError('Failed to process file');\n      }\n    } finally {\n      setIsProcessing(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    const jsonFile = files.find(file => file.type === 'application/json' || file.name.endsWith('.json'));\n    \n    if (jsonFile) {\n      processFile(jsonFile);\n    } else {\n      setError('Please upload a valid JSON file');\n    }\n  }, [processFile]);\n\n  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      processFile(file);\n    }\n  };\n\n  const handleAddToList = () => {\n    if (uploadedConfig) {\n      onConfigUploaded(uploadedConfig);\n      setUploadedConfig(null);\n      onClose?.();\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = () => {\n    setIsDragOver(false);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold\">Upload PLC Configuration</h2>\n        {onClose && (\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose} data-testid=\"button-close-uploader\">\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n\n      {!uploadedConfig && (\n        <Card\n          className={`border-2 border-dashed transition-colors cursor-pointer ${\n            isDragOver \n              ? \"border-primary bg-primary/5\" \n              : \"border-muted-foreground/25 hover:border-muted-foreground/50\"\n          }`}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          data-testid=\"area-file-drop\"\n        >\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"space-y-4\">\n              {isProcessing ? (\n                <>\n                  <div className=\"animate-spin mx-auto\">\n                    <FileText className=\"h-12 w-12 text-muted-foreground\" />\n                  </div>\n                  <p className=\"text-muted-foreground\">Processing file...</p>\n                </>\n              ) : (\n                <>\n                  <Upload className=\"h-12 w-12 text-muted-foreground mx-auto\" />\n                  <div className=\"space-y-2\">\n                    <p className=\"text-lg font-medium\">Drop your JSON file here</p>\n                    <p className=\"text-muted-foreground\">\n                      or click to browse files\n                    </p>\n                  </div>\n                  \n                  <input\n                    type=\"file\"\n                    accept=\".json,application/json\"\n                    onChange={handleFileInput}\n                    className=\"hidden\"\n                    id=\"json-upload\"\n                    data-testid=\"input-file-upload\"\n                  />\n                  <label htmlFor=\"json-upload\">\n                    <Button variant=\"outline\" asChild>\n                      <span>Browse Files</span>\n                    </Button>\n                  </label>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {uploadedConfig && (\n        <Card data-testid=\"card-config-preview\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-500\" />\n              Configuration Preview\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">PLC Name</label>\n                <p className=\"font-mono text-sm\">{uploadedConfig.plc_name}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">PLC Number</label>\n                <p className=\"font-mono text-sm\">{uploadedConfig.plc_no}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">IP Address</label>\n                <p className=\"font-mono text-sm\">{uploadedConfig.plc_ip}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">OPC UA URL</label>\n                <p className=\"font-mono text-sm break-all\">{uploadedConfig.opcua_url}</p>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground mb-2 block\">\n                Address Mappings ({uploadedConfig.address_mappings.length})\n              </label>\n              <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                {uploadedConfig.address_mappings.map((mapping, index) => (\n                  <div key={index} className=\"border rounded-md p-3 text-sm\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <Badge variant=\"outline\">{mapping.node_name}</Badge>\n                      {mapping.data_type && (\n                        <Badge variant=\"secondary\">{mapping.data_type}</Badge>\n                      )}\n                    </div>\n                    <p className=\"font-mono text-xs text-muted-foreground\">{mapping.node_id}</p>\n                    {mapping.description && (\n                      <p className=\"text-xs text-muted-foreground mt-1\">{mapping.description}</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button onClick={handleAddToList} data-testid=\"button-add-to-list\">\n                Add to PLC List\n              </Button>\n              <Button variant=\"outline\" onClick={() => setUploadedConfig(null)} data-testid=\"button-upload-another\">\n                Upload Another\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":8848},"client/src/components/LanguageSwitcher.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Globe } from \"lucide-react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport default function LanguageSwitcher() {\n  const { language, setLanguage } = useLanguage();\n\n  const toggleLanguage = () => {\n    setLanguage(language === \"en\" ? \"jp\" : \"en\");\n  };\n\n  return (\n    <Button \n      variant=\"ghost\" \n      size=\"sm\" \n      className=\"gap-2\"\n      onClick={toggleLanguage}\n      data-testid=\"button-language-switcher\"\n    >\n      <Globe className=\"h-4 w-4\" />\n      {language.toUpperCase()}\n    </Button>\n  );\n}","size_bytes":589},"client/src/components/LiveDataTable.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Search, Download, RefreshCw, Filter } from \"lucide-react\";\nimport { mockNodeData, type NodeData } from \"@shared/schema\";\n\ninterface LiveDataTableProps {\n  data?: NodeData[];\n  onExportCSV?: () => void;\n  onRefresh?: () => void;\n}\n\nexport default function LiveDataTable({ \n  data = mockNodeData, \n  onExportCSV,\n  onRefresh \n}: LiveDataTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filteredData, setFilteredData] = useState(data);\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // Simulate real-time updates - todo: remove mock functionality\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setLastUpdate(new Date());\n      // Simulate value changes\n      const newData = data.map(item => ({\n        ...item,\n        current_value: typeof item.current_value === 'number' \n          ? item.current_value + (Math.random() - 0.5) * 2\n          : item.current_value,\n        timestamp: new Date(),\n      }));\n      setFilteredData(newData.filter(item => \n        item.node_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        item.node_id.toLowerCase().includes(searchTerm.toLowerCase())\n      ));\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [data, searchTerm]);\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    console.log('Refreshing data...');\n    onRefresh?.();\n    setTimeout(() => setIsRefreshing(false), 1000);\n  };\n\n  const handleExport = () => {\n    console.log('Exporting CSV...');\n    onExportCSV?.();\n  };\n\n  const formatValue = (value: any, dataType?: string) => {\n    if (typeof value === 'number') {\n      return dataType === 'Float' ? value.toFixed(2) : Math.round(value).toString();\n    }\n    return String(value);\n  };\n\n  const getQualityBadge = (quality?: string) => {\n    if (!quality) return null;\n    \n    const variant = quality === 'Good' ? 'default' : \n                   quality === 'Uncertain' ? 'secondary' : 'destructive';\n    \n    return <Badge variant={variant} className=\"text-xs\">{quality}</Badge>;\n  };\n\n  return (\n    <Card data-testid=\"card-live-data\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            Live Node Data\n            <Badge variant=\"outline\" className=\"font-mono text-xs\">\n              {filteredData.length} nodes\n            </Badge>\n          </CardTitle>\n          \n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-xs text-muted-foreground\">\n              Last update: {lastUpdate.toLocaleTimeString()}\n            </span>\n            \n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              data-testid=\"button-refresh-data\"\n            >\n              <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={handleExport}\n              data-testid=\"button-export-csv\"\n            >\n              <Download className=\"h-4 w-4\" />\n              CSV\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Filter by node name or ID...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-filter-nodes\"\n            />\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <ScrollArea className=\"h-[500px]\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Node Name</TableHead>\n                <TableHead>Node ID</TableHead>\n                <TableHead>Current Value</TableHead>\n                <TableHead>Data Type</TableHead>\n                <TableHead>Quality</TableHead>\n                <TableHead>Timestamp</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody data-testid=\"table-node-data\">\n              {filteredData.map((item, index) => (\n                <TableRow key={`${item.node_id}-${index}`}>\n                  <TableCell className=\"font-medium\">\n                    {item.node_name}\n                  </TableCell>\n                  <TableCell className=\"font-mono text-sm text-muted-foreground\">\n                    {item.node_id}\n                  </TableCell>\n                  <TableCell className=\"font-mono font-medium\">\n                    {formatValue(item.current_value, item.data_type)}\n                  </TableCell>\n                  <TableCell>\n                    {item.data_type && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {item.data_type}\n                      </Badge>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {getQualityBadge(item.quality)}\n                  </TableCell>\n                  <TableCell className=\"font-mono text-xs text-muted-foreground\">\n                    {item.timestamp.toLocaleTimeString()}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          \n          {filteredData.length === 0 && (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <div className=\"space-y-2\">\n                <p className=\"text-lg\">No data found</p>\n                <p className=\"text-sm\">\n                  {searchTerm ? \"Try adjusting your filter terms\" : \"No node data available\"}\n                </p>\n              </div>\n            </div>\n          )}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6532},"client/src/components/PLCList.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Search, ArrowUpDown } from \"lucide-react\";\nimport PLCListItem from \"./PLCListItem\";\nimport type { PLC } from \"@shared/schema\";\n\ninterface PLCListProps {\n  plcs: PLC[];\n  onConnect?: (plcId: string) => void;\n  onDisconnect?: (plcId: string) => void;\n  onRefresh?: (plcId: string) => void;\n  onConfigure?: (plcId: string) => void;\n}\n\nexport default function PLCList({ \n  plcs, \n  onConnect, \n  onDisconnect, \n  onRefresh, \n  onConfigure \n}: PLCListProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"asc\");\n\n  const filteredAndSortedPLCs = useMemo(() => {\n    let filtered = plcs.filter((plc) => \n      plc.plc_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      plc.plc_no.toString().includes(searchTerm) ||\n      plc.plc_ip.includes(searchTerm)\n    );\n\n    return filtered.sort((a, b) => {\n      const comparison = sortOrder === \"asc\" \n        ? a.plc_no - b.plc_no \n        : b.plc_no - a.plc_no;\n      return comparison;\n    });\n  }, [plcs, searchTerm, sortOrder]);\n\n  const toggleSort = () => {\n    setSortOrder(prev => prev === \"asc\" ? \"desc\" : \"asc\");\n    console.log(`Sort order changed to: ${sortOrder === \"asc\" ? \"desc\" : \"asc\"}`);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-2\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search PLCs by name, number, or IP...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-plcs\"\n          />\n        </div>\n        \n        <Button \n          variant=\"outline\" \n          size=\"icon\"\n          onClick={toggleSort}\n          data-testid=\"button-sort-plcs\"\n        >\n          <ArrowUpDown className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      <div className=\"text-sm text-muted-foreground\">\n        {filteredAndSortedPLCs.length} PLC{filteredAndSortedPLCs.length !== 1 ? 's' : ''} found\n        {searchTerm && ` (filtered from ${plcs.length} total)`}\n        {\" • Sorted by PLC number \"}({sortOrder === \"asc\" ? \"ascending\" : \"descending\"})\n      </div>\n\n      <ScrollArea className=\"h-[600px]\">\n        <div className=\"space-y-3\" data-testid=\"list-plcs\">\n          {filteredAndSortedPLCs.map((plc) => (\n            <PLCListItem\n              key={plc.id}\n              plc={plc}\n              onConnect={onConnect}\n              onDisconnect={onDisconnect}\n              onRefresh={onRefresh}\n              onConfigure={onConfigure}\n            />\n          ))}\n          \n          {filteredAndSortedPLCs.length === 0 && (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <div className=\"space-y-2\">\n                <p className=\"text-lg\">No PLCs found</p>\n                <p className=\"text-sm\">\n                  {searchTerm ? \"Try adjusting your search terms\" : \"No PLCs have been configured yet\"}\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":3420},"client/src/components/PLCListItem.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { MoreVertical, Settings, RefreshCw, Wifi } from \"lucide-react\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport type { PLC } from \"@shared/schema\";\n\ninterface PLCListItemProps {\n  plc: PLC;\n  onConnect?: (plcId: string) => void;\n  onDisconnect?: (plcId: string) => void;\n  onRefresh?: (plcId: string) => void;\n  onConfigure?: (plcId: string) => void;\n}\n\nexport default function PLCListItem({ \n  plc, \n  onConnect, \n  onDisconnect, \n  onRefresh, \n  onConfigure \n}: PLCListItemProps) {\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const handleConnect = async () => {\n    if (plc.is_connected) {\n      console.log(`Disconnecting PLC ${plc.plc_name}`);\n      onDisconnect?.(plc.id);\n    } else {\n      console.log(`Connecting PLC ${plc.plc_name}`);\n      setIsConnecting(true);\n      // Simulate connection delay\n      setTimeout(() => {\n        setIsConnecting(false);\n        onConnect?.(plc.id);\n      }, 1000);\n    }\n  };\n\n  const handleRefresh = () => {\n    console.log(`Refreshing PLC ${plc.plc_name}`);\n    onRefresh?.(plc.id);\n  };\n\n  const handleConfigure = () => {\n    console.log(`Configuring PLC ${plc.plc_name}`);\n    onConfigure?.(plc.id);\n  };\n\n  const truncatedName = plc.plc_name.length > 25 \n    ? `${plc.plc_name.substring(0, 25)}...` \n    : plc.plc_name;\n\n  return (\n    <Card className=\"p-4 hover-elevate\" data-testid={`card-plc-${plc.id}`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n          <StatusIndicator status={plc.status} />\n          \n          <div className=\"flex-1 min-w-0\">\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"space-y-1\">\n                  <p className=\"font-mono text-sm font-medium text-foreground\">\n                    P_{plc.plc_no}_{truncatedName}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground font-mono\">\n                    {plc.plc_ip}\n                  </p>\n                </div>\n              </TooltipTrigger>\n              {plc.plc_name.length > 25 && (\n                <TooltipContent>\n                  <p className=\"font-mono\">P_{plc.plc_no}_{plc.plc_name}</p>\n                </TooltipContent>\n              )}\n            </Tooltip>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={plc.is_connected ? \"default\" : \"secondary\"}>\n              <Wifi className=\"w-3 h-3 mr-1\" />\n              {plc.is_connected ? \"Connected\" : \"Disconnected\"}\n            </Badge>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleConnect}\n            disabled={isConnecting}\n            data-testid={`button-connect-${plc.id}`}\n          >\n            {isConnecting ? (\n              <RefreshCw className=\"h-4 w-4 animate-spin\" />\n            ) : plc.is_connected ? (\n              \"Disconnect\"\n            ) : (\n              \"Connect\"\n            )}\n          </Button>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" data-testid={`button-menu-${plc.id}`}>\n                <MoreVertical className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={handleRefresh} data-testid={`menu-refresh-${plc.id}`}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={handleConfigure} data-testid={`menu-configure-${plc.id}`}>\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Configure\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n\n      <div className=\"mt-3 pt-3 border-t\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <span className=\"font-mono\">{plc.opcua_url}</span>\n          <span>\n            Last checked: {plc.last_checked.toLocaleTimeString()}\n          </span>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":4650},"client/src/components/ServersPage.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronDown, ChevronRight, Server, Activity } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport type { PLC } from \"@shared/schema\";\n\n// Group PLCs by OPCUA URL\nconst groupPLCsByServer = (plcs: PLC[]) => {\n  const grouped = new Map<string, PLC[]>();\n  \n  plcs.forEach(plc => {\n    const serverUrl = plc.opcua_url;\n    if (!grouped.has(serverUrl)) {\n      grouped.set(serverUrl, []);\n    }\n    grouped.get(serverUrl)!.push(plc);\n  });\n  \n  return Array.from(grouped.entries()).map(([url, plcs]) => ({\n    serverUrl: url,\n    plcs,\n    connectedCount: plcs.filter(p => p.is_connected).length,\n    totalCount: plcs.length,\n    status: plcs.some(p => p.is_connected) ? \"connected\" : \"disconnected\",\n    lastUpdated: Math.max(...plcs.map(p => new Date(p.last_checked ?? 0).getTime())),\n  }));\n};\n\nexport default function ServersPage() {\n  const [expandedServers, setExpandedServers] = useState<Set<string>>(new Set());\n  \n  const { data: plcs = [], isLoading } = useQuery<PLC[]>({\n    queryKey: ['api', 'plcs'],\n  });\n\n  const servers = groupPLCsByServer(plcs);\n  const connectedServers = servers.filter(s => s.status === \"connected\").length;\n\n  const toggleServerExpansion = (serverUrl: string) => {\n    setExpandedServers(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(serverUrl)) {\n        newSet.delete(serverUrl);\n      } else {\n        newSet.add(serverUrl);\n      }\n      return newSet;\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variant = status === \"connected\" ? \"default\" : \"secondary\";\n    const icon = status === \"connected\" ? Activity : Server;\n    const Icon = icon;\n    \n    return (\n      <Badge variant={variant} className=\"flex items-center gap-1\" data-testid={`status-${status}`}>\n        <Icon className=\"w-3 h-3\" />\n        {status === \"connected\" ? \"Connected\" : \"Disconnected\"}\n      </Badge>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-2xl font-bold\" data-testid=\"text-servers-title\">OPCUA Servers</h1>\n          <div className=\"text-sm text-muted-foreground\" data-testid=\"text-servers-count\">\n            Loading servers...\n          </div>\n        </div>\n        <div className=\"text-center py-24 text-muted-foreground\">\n          <p>Loading server configurations...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h1 className=\"text-2xl font-bold\" data-testid=\"text-servers-title\">OPCUA Servers</h1>\n        <div className=\"text-sm text-muted-foreground\" data-testid=\"text-servers-count\">\n          {connectedServers}/{servers.length} servers connected\n        </div>\n      </div>\n\n      {servers.length === 0 ? (\n        <div className=\"text-center py-24 text-muted-foreground\">\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-medium\">No Servers Available</h3>\n            <p className=\"text-sm max-w-md mx-auto\">\n              Add PLC configurations to see grouped servers here.\n            </p>\n          </div>\n        </div>\n      ) : (\n        <div className=\"border rounded-lg\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-12\"></TableHead>\n                <TableHead data-testid=\"header-server-url\">Server URL</TableHead>\n                <TableHead data-testid=\"header-status\">Status</TableHead>\n                <TableHead data-testid=\"header-updated\">Last Updated</TableHead>\n                <TableHead data-testid=\"header-plc-count\">PLCs Connected</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {servers.map((server) => {\n                const isExpanded = expandedServers.has(server.serverUrl);\n                \n                return (\n                  <Collapsible key={server.serverUrl} asChild>\n                    <>\n                      <CollapsibleTrigger asChild>\n                        <TableRow \n                          className=\"cursor-pointer hover-elevate\"\n                          onClick={() => toggleServerExpansion(server.serverUrl)}\n                          data-testid={`row-server-${server.serverUrl}`}\n                        >\n                          <TableCell>\n                            {isExpanded ? (\n                              <ChevronDown className=\"w-4 h-4\" />\n                            ) : (\n                              <ChevronRight className=\"w-4 h-4\" />\n                            )}\n                          </TableCell>\n                          <TableCell className=\"font-medium\" data-testid={`text-server-url-${server.serverUrl}`}>\n                            {server.serverUrl}\n                          </TableCell>\n                          <TableCell data-testid={`status-server-${server.serverUrl}`}>\n                            {getStatusBadge(server.status)}\n                          </TableCell>\n                          <TableCell data-testid={`text-updated-${server.serverUrl}`}>\n                            {server.lastUpdated ? new Date(server.lastUpdated).toLocaleString() : \"Never\"}\n                          </TableCell>\n                          <TableCell data-testid={`text-plc-count-${server.serverUrl}`}>\n                            {server.connectedCount}/{server.totalCount}\n                          </TableCell>\n                        </TableRow>\n                      </CollapsibleTrigger>\n                      <CollapsibleContent asChild>\n                        <TableRow>\n                          <TableCell></TableCell>\n                          <TableCell colSpan={4}>\n                            <div className=\"py-2 space-y-2\">\n                              <h4 className=\"font-medium text-sm text-muted-foreground mb-3\">\n                                PLCs on this server:\n                              </h4>\n                              <div className=\"grid gap-2\">\n                                {server.plcs.map((plc) => (\n                                  <Link\n                                    key={plc.id}\n                                    href={`/?plcId=${plc.id}`}\n                                    data-testid={`link-plc-${plc.id}`}\n                                  >\n                                    <div className=\"flex items-center justify-between p-3 border rounded hover-elevate\">\n                                      <div className=\"flex items-center gap-3\">\n                                        <div>\n                                          <div className=\"font-medium\" data-testid={`text-plc-name-${plc.id}`}>\n                                            {plc.plc_name}\n                                          </div>\n                                          <div className=\"text-sm text-muted-foreground\" data-testid={`text-plc-ip-${plc.id}`}>\n                                            {plc.plc_ip}\n                                          </div>\n                                        </div>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        {getStatusBadge(plc.is_connected ? \"connected\" : \"disconnected\")}\n                                      </div>\n                                    </div>\n                                  </Link>\n                                ))}\n                              </div>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      </CollapsibleContent>\n                    </>\n                  </Collapsible>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8311},"client/src/components/StatusIndicator.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport type { PLCStatus, ConnectionStatus } from \"@shared/schema\";\n\ninterface StatusIndicatorProps {\n  status: PLCStatus | ConnectionStatus;\n  size?: \"sm\" | \"md\" | \"lg\";\n  showLabel?: boolean;\n  className?: string;\n}\n\nconst statusConfig = {\n  active: {\n    color: \"bg-green-500\",\n    label: \"Active\",\n    labelJp: \"アクティブ\",\n  },\n  inactive: {\n    color: \"bg-gray-400\",\n    label: \"Inactive\", \n    labelJp: \"非アクティブ\",\n  },\n  maintenance: {\n    color: \"bg-amber-500\",\n    label: \"Maintenance\",\n    labelJp: \"メンテナンス\",\n  },\n  error: {\n    color: \"bg-red-500\", \n    label: \"Error\",\n    labelJp: \"エラー\",\n  },\n};\n\nconst sizeConfig = {\n  sm: \"w-2 h-2\",\n  md: \"w-3 h-3\", \n  lg: \"w-4 h-4\",\n};\n\nexport default function StatusIndicator({ \n  status, \n  size = \"md\", \n  showLabel = false,\n  className \n}: StatusIndicatorProps) {\n  const config = statusConfig[status];\n  \n  return (\n    <div className={cn(\"flex items-center gap-2\", className)}>\n      <div className={cn(\n        \"rounded-full shrink-0\",\n        config.color,\n        sizeConfig[size]\n      )} />\n      {showLabel && (\n        <span className=\"text-sm text-muted-foreground\">\n          {config.label}\n        </span>\n      )}\n    </div>\n  );\n}","size_bytes":1266},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import type { PLC, PLCConfig, NodeData, ServerStatus } from \"@shared/schema\";\n\nconst API_BASE = \"/api\";\n\nexport const api = {\n  // PLC Management\n  async getAllPLCs(): Promise<PLC[]> {\n    const response = await fetch(`${API_BASE}/plcs`);\n    if (!response.ok) throw new Error(\"Failed to fetch PLCs\");\n    return response.json();\n  },\n\n  async getPLCById(id: string): Promise<PLC> {\n    const response = await fetch(`${API_BASE}/plcs/${id}`);\n    if (!response.ok) throw new Error(\"Failed to fetch PLC\");\n    return response.json();\n  },\n\n  async createPLC(config: PLCConfig): Promise<PLC> {\n    const response = await fetch(`${API_BASE}/plcs`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(config),\n    });\n    if (!response.ok) throw new Error(\"Failed to create PLC\");\n    return response.json();\n  },\n\n  async updatePLC(id: string, updates: Partial<PLC>): Promise<PLC> {\n    const response = await fetch(`${API_BASE}/plcs/${id}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(updates),\n    });\n    if (!response.ok) throw new Error(\"Failed to update PLC\");\n    return response.json();\n  },\n\n  async deletePLC(id: string): Promise<void> {\n    const response = await fetch(`${API_BASE}/plcs/${id}`, {\n      method: \"DELETE\",\n    });\n    if (!response.ok) throw new Error(\"Failed to delete PLC\");\n  },\n\n  // Connection Management\n  async connectPLC(id: string): Promise<PLC> {\n    const response = await fetch(`${API_BASE}/plcs/${id}/connect`, {\n      method: \"POST\",\n    });\n    if (!response.ok) throw new Error(\"Failed to connect PLC\");\n    return response.json();\n  },\n\n  async disconnectPLC(id: string): Promise<PLC> {\n    const response = await fetch(`${API_BASE}/plcs/${id}/disconnect`, {\n      method: \"POST\",\n    });\n    if (!response.ok) throw new Error(\"Failed to disconnect PLC\");\n    return response.json();\n  },\n\n  // Node Data\n  async getNodeData(plcId: string): Promise<NodeData[]> {\n    const response = await fetch(`${API_BASE}/plcs/${plcId}/data`);\n    if (!response.ok) throw new Error(\"Failed to fetch node data\");\n    return response.json();\n  },\n\n  // File Upload\n  async uploadJSONConfig(file: File): Promise<{ success: boolean; config: PLCConfig }> {\n    const formData = new FormData();\n    formData.append(\"jsonFile\", file);\n\n    const response = await fetch(`${API_BASE}/upload/json`, {\n      method: \"POST\",\n      body: formData,\n    });\n    \n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || \"Failed to upload file\");\n    }\n    \n    return response.json();\n  },\n\n  // Server Status\n  async getServerStatuses(): Promise<ServerStatus[]> {\n    const response = await fetch(`${API_BASE}/servers/status`);\n    if (!response.ok) throw new Error(\"Failed to fetch server statuses\");\n    return response.json();\n  },\n\n  // Data Export\n  async exportCSV(plcId?: string): Promise<Blob> {\n    const url = plcId ? `${API_BASE}/export/csv?plcId=${plcId}` : `${API_BASE}/export/csv`;\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(\"Failed to export CSV\");\n    return response.blob();\n  },\n};","size_bytes":3209},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/socket.ts":{"content":"import { io, Socket } from \"socket.io-client\";\n\nclass SocketManager {\n  private socket: Socket | null = null;\n\n  connect() {\n    if (this.socket?.connected) return this.socket;\n\n    this.socket = io(\"http://localhost:5000\", {\n      autoConnect: true,\n    });\n\n    this.socket.on(\"connect\", () => {\n      console.log(\"Connected to WebSocket server\");\n    });\n\n    this.socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from WebSocket server\");\n    });\n\n    return this.socket;\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  getSocket() {\n    return this.socket;\n  }\n\n  subscribeToPLC(plcId: string) {\n    if (this.socket) {\n      this.socket.emit(\"subscribePLC\", plcId);\n    }\n  }\n\n  unsubscribeFromPLC(plcId: string) {\n    if (this.socket) {\n      this.socket.emit(\"unsubscribePLC\", plcId);\n    }\n  }\n}\n\nexport const socketManager = new SocketManager();","size_bytes":936},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/Dashboard.tsx":{"content":"import Dashboard from \"../Dashboard\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\n\nexport default function DashboardExample() {\n  return (\n    <TooltipProvider>\n      <div className=\"h-screen w-full\">\n        <Dashboard />\n      </div>\n    </TooltipProvider>\n  );\n}","size_bytes":280},"client/src/components/examples/JsonUploader.tsx":{"content":"import JsonUploader from \"../JsonUploader\";\n\nexport default function JsonUploaderExample() {\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <JsonUploader\n        onConfigUploaded={(config) => {\n          console.log('Config uploaded:', config);\n        }}\n        onClose={() => console.log('Uploader closed')}\n      />\n    </div>\n  );\n}","size_bytes":343},"client/src/components/examples/LanguageSwitcher.tsx":{"content":"import { useState } from \"react\";\nimport LanguageSwitcher from \"../LanguageSwitcher\";\nimport type { Language } from \"@shared/schema\";\n\nexport default function LanguageSwitcherExample() {\n  const [language, setLanguage] = useState<Language>(\"en\");\n\n  return (\n    <div className=\"p-4\">\n      <LanguageSwitcher \n        currentLanguage={language} \n        onLanguageChange={(lang) => {\n          console.log(`Language changed to: ${lang}`);\n          setLanguage(lang);\n        }} \n      />\n    </div>\n  );\n}","size_bytes":506},"client/src/components/examples/LiveDataTable.tsx":{"content":"import LiveDataTable from \"../LiveDataTable\";\nimport { mockNodeData } from \"@shared/schema\";\n\nexport default function LiveDataTableExample() {\n  return (\n    <div className=\"p-4 max-w-6xl\">\n      <LiveDataTable\n        data={mockNodeData}\n        onExportCSV={() => console.log('Export CSV clicked')}\n        onRefresh={() => console.log('Refresh clicked')}\n      />\n    </div>\n  );\n}","size_bytes":384},"client/src/components/examples/PLCList.tsx":{"content":"import PLCList from \"../PLCList\";\nimport { mockPLCs } from \"@shared/schema\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\n\nexport default function PLCListExample() {\n  return (\n    <TooltipProvider>\n      <div className=\"p-4 max-w-4xl\">\n        <PLCList\n          plcs={mockPLCs}\n          onConnect={(id) => console.log(`Connect PLC ${id}`)}\n          onDisconnect={(id) => console.log(`Disconnect PLC ${id}`)}\n          onRefresh={(id) => console.log(`Refresh PLC ${id}`)}\n          onConfigure={(id) => console.log(`Configure PLC ${id}`)}\n        />\n      </div>\n    </TooltipProvider>\n  );\n}","size_bytes":609},"client/src/components/examples/PLCListItem.tsx":{"content":"import PLCListItem from \"../PLCListItem\";\nimport { mockPLCs } from \"@shared/schema\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\n\nexport default function PLCListItemExample() {\n  return (\n    <TooltipProvider>\n      <div className=\"p-4 space-y-4 max-w-2xl\">\n        {mockPLCs.slice(0, 3).map((plc) => (\n          <PLCListItem\n            key={plc.id}\n            plc={plc}\n            onConnect={(id) => console.log(`Connect PLC ${id}`)}\n            onDisconnect={(id) => console.log(`Disconnect PLC ${id}`)}\n            onRefresh={(id) => console.log(`Refresh PLC ${id}`)}\n            onConfigure={(id) => console.log(`Configure PLC ${id}`)}\n          />\n        ))}\n      </div>\n    </TooltipProvider>\n  );\n}","size_bytes":725},"client/src/components/examples/StatusIndicator.tsx":{"content":"import StatusIndicator from \"../StatusIndicator\";\n\nexport default function StatusIndicatorExample() {\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"space-y-2\">\n        <h4 className=\"font-medium\">Without Labels</h4>\n        <div className=\"flex items-center gap-4\">\n          <StatusIndicator status=\"active\" size=\"sm\" />\n          <StatusIndicator status=\"maintenance\" size=\"md\" />\n          <StatusIndicator status=\"error\" size=\"lg\" />\n          <StatusIndicator status=\"inactive\" size=\"md\" />\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <h4 className=\"font-medium\">With Labels</h4>\n        <div className=\"space-y-2\">\n          <StatusIndicator status=\"active\" showLabel />\n          <StatusIndicator status=\"maintenance\" showLabel />\n          <StatusIndicator status=\"error\" showLabel />\n          <StatusIndicator status=\"inactive\" showLabel />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":952},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/contexts/LanguageContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport type { Language } from \"@shared/schema\";\n\n// Comprehensive translation dictionaries\nconst translations = {\n  en: {\n    // Navigation\n    dashboard: \"Dashboard\",\n    opcuaServers: \"OPC UA Servers\",\n    addNew: \"Add New\",\n    \n    // Dashboard\n    dashboardTitle: \"OPC UA Dashboard\",\n    realTimeData: \"Real-time Data\",\n    lastUpdated: \"Last updated\",\n    connectionStatus: \"Connection Status\",\n    \n    // Server management\n    serverUrl: \"Server URL\",\n    status: \"Status\",\n    plcCount: \"PLC Count\",\n    lastUpdate: \"Last Update\",\n    connected: \"Connected\",\n    disconnected: \"Disconnected\",\n    maintenance: \"Maintenance\",\n    error: \"Error\",\n    active: \"Active\",\n    inactive: \"Inactive\",\n    \n    // PLC details\n    plcName: \"PLC Name\",\n    plcIp: \"PLC IP\",\n    opcuaUrl: \"OPC UA URL\",\n    registerCount: \"Register Count\",\n    boolCount: \"Bool Variables\",\n    channelCount: \"Channel Variables\",\n    \n    // Variables table\n    name: \"Name\",\n    description: \"Description\",\n    value: \"Value\",\n    type: \"Type\",\n    address: \"Address\",\n    nodeId: \"Node ID\",\n    dataType: \"Data Type\",\n    channel: \"Channel\",\n    bool: \"Bool\",\n    \n    // File upload\n    uploadJsonConfig: \"Upload JSON Configuration\",\n    dragDropFile: \"Drop your JSON file here\",\n    browseFiles: \"Browse Files\",\n    processingFile: \"Processing file...\",\n    addToDatabase: \"Add to Database\",\n    uploadAnother: \"Upload Another\",\n    \n    // Actions\n    expand: \"Expand\",\n    collapse: \"Collapse\",\n    select: \"Select\",\n    deselect: \"Deselect\",\n    filter: \"Filter\",\n    search: \"Search\",\n    refresh: \"Refresh\",\n    save: \"Save\",\n    cancel: \"Cancel\",\n    confirm: \"Confirm\",\n    \n    // Status messages\n    success: \"Success\",\n    warning: \"Warning\",\n    loading: \"Loading\",\n    noData: \"No data available\",\n    serverConnected: \"Server connected successfully\",\n    serverDisconnected: \"Server disconnected\",\n    configUploaded: \"Configuration uploaded successfully\",\n    plcAdded: \"PLC Added\",\n    plcAddedSuccess: \"Successfully added new PLC configuration\",\n    plcAddFailed: \"Failed to Add PLC\",\n    plcDeleted: \"PLC Deleted\",\n    plcDeletedSuccess: \"Successfully deleted PLC configuration\",\n    plcDeleteFailed: \"Failed to Delete PLC\",\n    dataRefreshed: \"Data has been refreshed\",\n    \n    // Language selector\n    language: \"Language\",\n    english: \"English\",\n    japanese: \"Japanese\",\n    \n    // Time formats\n    timeAgo: \"ago\",\n    justNow: \"just now\",\n    minute: \"minute\",\n    minutes: \"minutes\",\n    hour: \"hour\", \n    hours: \"hours\",\n    day: \"day\",\n    days: \"days\",\n    \n    // Errors\n    errorOccurred: \"An error occurred\",\n    connectionFailed: \"Connection failed\",\n    invalidFile: \"Invalid file format\",\n    uploadFailed: \"Upload failed\",\n    \n    // Variables table\n    variables: \"Variables\",\n    selected: \"Selected\",\n    showAll: \"Show All\",\n    showSelected: \"Show Selected\",\n    noMatchingVariables: \"No matching variables found\",\n  },\n  jp: {\n    // Navigation\n    dashboard: \"ダッシュボード\",\n    opcuaServers: \"OPC UAサーバー\",\n    addNew: \"新規追加\",\n    \n    // Dashboard\n    dashboardTitle: \"OPC UAダッシュボード\",\n    realTimeData: \"リアルタイムデータ\",\n    lastUpdated: \"最終更新\",\n    connectionStatus: \"接続状態\",\n    \n    // Server management\n    serverUrl: \"サーバーURL\",\n    status: \"状態\",\n    plcCount: \"PLC数\",\n    lastUpdate: \"最終更新\",\n    connected: \"接続中\",\n    disconnected: \"切断中\",\n    maintenance: \"メンテナンス\",\n    error: \"エラー\",\n    active: \"稼働中\",\n    inactive: \"停止中\",\n    \n    // PLC details\n    plcName: \"PLC名\",\n    plcIp: \"PLC IP\",\n    opcuaUrl: \"OPC UA URL\",\n    registerCount: \"レジスタ数\",\n    boolCount: \"ブール変数\",\n    channelCount: \"チャネル変数\",\n    \n    // Variables table\n    name: \"名前\",\n    description: \"説明\",\n    value: \"値\",\n    type: \"種類\",\n    address: \"アドレス\",\n    nodeId: \"ノードID\",\n    dataType: \"データ型\",\n    channel: \"チャネル\",\n    bool: \"ブール\",\n    \n    // File upload\n    uploadJsonConfig: \"JSON設定ファイルアップロード\",\n    dragDropFile: \"JSONファイルをここにドロップ\",\n    browseFiles: \"ファイル参照\",\n    processingFile: \"ファイル処理中...\",\n    addToDatabase: \"データベースに追加\",\n    uploadAnother: \"他のファイルをアップロード\",\n    \n    // Actions\n    expand: \"展開\",\n    collapse: \"折りたたみ\",\n    select: \"選択\",\n    deselect: \"選択解除\",\n    filter: \"フィルター\",\n    search: \"検索\",\n    refresh: \"更新\",\n    save: \"保存\",\n    cancel: \"キャンセル\",\n    confirm: \"確認\",\n    \n    // Status messages\n    success: \"成功\",\n    warning: \"警告\",\n    loading: \"読み込み中\",\n    noData: \"データがありません\",\n    serverConnected: \"サーバー接続成功\",\n    serverDisconnected: \"サーバー切断\",\n    configUploaded: \"設定アップロード成功\",\n    plcAdded: \"PLC追加\",\n    plcAddedSuccess: \"新しいPLC設定を正常に追加しました\",\n    plcAddFailed: \"PLC追加に失敗しました\",\n    plcDeleted: \"PLC削除\",\n    plcDeletedSuccess: \"PLC設定を正常に削除しました\",\n    plcDeleteFailed: \"PLC削除に失敗しました\",\n    dataRefreshed: \"データが更新されました\",\n    \n    // Language selector\n    language: \"言語\",\n    english: \"英語\",\n    japanese: \"日本語\",\n    \n    // Time formats\n    timeAgo: \"前\",\n    justNow: \"たった今\",\n    minute: \"分\",\n    minutes: \"分\",\n    hour: \"時間\",\n    hours: \"時間\",\n    day: \"日\",\n    days: \"日\",\n    \n    // Errors\n    errorOccurred: \"エラーが発生しました\",\n    connectionFailed: \"接続に失敗しました\",\n    invalidFile: \"無効なファイル形式\",\n    uploadFailed: \"アップロードに失敗しました\",\n    \n    // Variables table\n    variables: \"変数\",\n    selected: \"選択済み\",\n    showAll: \"すべて表示\",\n    showSelected: \"選択済みを表示\",\n    noMatchingVariables: \"一致する変数が見つかりません\",\n  },\n} as const;\n\ntype TranslationKey = keyof typeof translations.en;\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (language: Language) => void;\n  t: (key: TranslationKey) => string;\n  translations: typeof translations[Language];\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport function LanguageProvider({ children }: LanguageProviderProps) {\n  const [language, setLanguageState] = useState<Language>(() => {\n    // Try to get language from localStorage, fallback to English\n    try {\n      const saved = localStorage.getItem(\"opcua-dashboard-language\");\n      return (saved === \"en\" || saved === \"jp\") ? saved : \"en\";\n    } catch {\n      return \"en\";\n    }\n  });\n\n  // Persist language changes to localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"opcua-dashboard-language\", language);\n    } catch {\n      // localStorage may not be available\n    }\n  }, [language]);\n\n  // Translation function\n  const t = (key: TranslationKey): string => {\n    return translations[language][key] || translations.en[key] || key;\n  };\n\n  const setLanguage = (newLanguage: Language) => {\n    setLanguageState(newLanguage);\n  };\n\n  const value: LanguageContextType = {\n    language,\n    setLanguage,\n    t,\n    translations: translations[language],\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n  }\n  return context;\n}\n\n// Export translations for components that need direct access\nexport { translations };","size_bytes":7952},"client/src/components/EnhancedVariablesTable.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { \n  Search, \n  Download, \n  RefreshCw, \n  ChevronDown, \n  ChevronRight,\n  Eye,\n  EyeOff \n} from \"lucide-react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { \n  getParentVariables, \n  getChildVariables, \n  type NormalizedVariable,\n  type NormalizedPLC \n} from \"@shared/normalization\";\n\ninterface EnhancedVariablesTableProps {\n  plc?: NormalizedPLC;\n  onExportCSV?: () => void;\n  onRefresh?: () => void;\n}\n\nexport default function EnhancedVariablesTable({ \n  plc,\n  onExportCSV,\n  onRefresh \n}: EnhancedVariablesTableProps) {\n  const { t } = useLanguage();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedVariables, setSelectedVariables] = useState<Set<string>>(new Set());\n  const [expandedChannels, setExpandedChannels] = useState<Set<string>>(new Set());\n  const [showSelectedOnly, setShowSelectedOnly] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // Debug logging (cleaned up for production)\n  // console.log('EnhancedVariablesTable - plc:', plc);\n  // console.log('EnhancedVariablesTable - variables:', plc?.variables);\n  // console.log('EnhancedVariablesTable - variables length:', plc?.variables?.length || 0);\n  \n  const variables = plc?.variables || [];\n  const parentVariables = getParentVariables(variables);\n  \n  // Filter variables based on search term\n  const filteredParentVariables = parentVariables.filter(variable => {\n    const searchLower = searchTerm.toLowerCase();\n    const matchesSearch = \n      variable.plc_reg_add.toLowerCase().includes(searchLower) ||\n      variable.opcua_reg_add.toLowerCase().includes(searchLower) ||\n      variable.description.toLowerCase().includes(searchLower);\n    \n    if (showSelectedOnly) {\n      // Show if parent is selected or any child is selected\n      const childVariables = getChildVariables(variables, variable.id);\n      const hasSelectedChild = childVariables.some(child => selectedVariables.has(child.id));\n      return matchesSearch && (selectedVariables.has(variable.id) || hasSelectedChild);\n    }\n    \n    return matchesSearch;\n  });\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    onRefresh?.();\n    setTimeout(() => setIsRefreshing(false), 1000);\n  };\n\n  const handleVariableSelect = (variableId: string, checked: boolean) => {\n    const newSelected = new Set(selectedVariables);\n    if (checked) {\n      newSelected.add(variableId);\n    } else {\n      newSelected.delete(variableId);\n    }\n    setSelectedVariables(newSelected);\n  };\n\n  const handleChannelSelect = (channelId: string, checked: boolean) => {\n    const newSelected = new Set(selectedVariables);\n    const childVariables = getChildVariables(variables, channelId);\n    \n    if (checked) {\n      newSelected.add(channelId);\n      childVariables.forEach(child => newSelected.add(child.id));\n    } else {\n      newSelected.delete(channelId);\n      childVariables.forEach(child => newSelected.delete(child.id));\n    }\n    setSelectedVariables(newSelected);\n  };\n\n  const toggleChannelExpanded = (channelId: string) => {\n    const newExpanded = new Set(expandedChannels);\n    if (newExpanded.has(channelId)) {\n      newExpanded.delete(channelId);\n    } else {\n      newExpanded.add(channelId);\n    }\n    setExpandedChannels(newExpanded);\n  };\n\n  const isChannelExpanded = (channelId: string) => expandedChannels.has(channelId);\n\n  const getVariableValue = (variable: NormalizedVariable) => {\n    // Mock real-time values - in real implementation, this would come from live data\n    if (variable.type === 'bool') {\n      return Math.random() > 0.5 ? 'true' : 'false';\n    } else if (variable.type === 'channel') {\n      return Math.floor(Math.random() * 1000).toString();\n    }\n    return 'N/A';\n  };\n\n  const getDataTypeBadge = (variable: NormalizedVariable) => {\n    const variant = variable.type === 'bool' ? 'secondary' : 'default';\n    return (\n      <Badge variant={variant} className=\"text-xs\">\n        {variable.type === 'bool' ? t(\"bool\") : t(\"channel\")}\n      </Badge>\n    );\n  };\n\n  const selectedCount = selectedVariables.size;\n  const totalVariables = variables.length;\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"enhanced-variables-table\">\n      {/* Header Section */}\n      <div className=\"space-y-4\">\n        {/* Title and Actions */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n              {t(\"realTimeData\")}\n              <Badge variant=\"outline\" className=\"font-mono text-xs\">\n                {totalVariables} {t(\"variables\")}\n              </Badge>\n              {selectedCount > 0 && (\n                <Badge variant=\"default\" className=\"font-mono text-xs bg-primary\">\n                  {selectedCount} {t(\"selected\")}\n                </Badge>\n              )}\n            </h2>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              data-testid=\"button-refresh-variables\"\n            >\n              <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n            </Button>\n            \n            <Button \n              variant=\"default\" \n              size=\"sm\" \n              onClick={onExportCSV}\n              className=\"bg-green-600 text-white\"\n              data-testid=\"button-export-variables\"\n            >\n              <Download className=\"h-4 w-4 mr-1\" />\n              CSV\n            </Button>\n          </div>\n        </div>\n        \n        {/* Search and Filter */}\n        <div className=\"flex items-center gap-3\">\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder={`${t(\"search\")} ${t(\"variables\").toLowerCase()}...`}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-variables\"\n            />\n          </div>\n          \n          <Button\n            variant={showSelectedOnly ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setShowSelectedOnly(!showSelectedOnly)}\n            className=\"gap-2\"\n            data-testid=\"button-toggle-selected\"\n          >\n            {showSelectedOnly ? <Eye className=\"h-4 w-4\" /> : <EyeOff className=\"h-4 w-4\" />}\n            {showSelectedOnly ? t(\"showAll\") : t(\"showSelected\")}\n          </Button>\n        </div>\n      </div>\n\n      {/* Table Section */}\n      <div className=\"border rounded-lg bg-background\">\n        <ScrollArea className=\"h-[600px]\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-8 text-left\"></TableHead>\n                <TableHead className=\"w-8 text-left\"></TableHead>\n                <TableHead className=\"text-left\">{t(\"name\")}</TableHead>\n                <TableHead className=\"text-left\">{t(\"description\")}</TableHead>\n                <TableHead className=\"text-left\">{t(\"value\")}</TableHead>\n                <TableHead className=\"text-left\">{t(\"type\")}</TableHead>\n                <TableHead className=\"text-left\">{t(\"address\")}</TableHead>\n                <TableHead className=\"text-left\">{t(\"nodeId\")}</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody data-testid=\"table-variables-body\">\n              {filteredParentVariables.map((variable) => {\n                const childVariables = getChildVariables(variables, variable.id);\n                const isExpanded = isChannelExpanded(variable.id);\n                const isSelected = selectedVariables.has(variable.id);\n                const hasChildren = variable.type === 'channel' && childVariables.length > 0;\n                \n                return (\n                  <React.Fragment key={variable.id}>\n                    <TableRow key={variable.id} className=\"group\">\n                      <TableCell>\n                        <Checkbox\n                          checked={isSelected}\n                          onCheckedChange={(checked) => \n                            hasChildren \n                              ? handleChannelSelect(variable.id, checked as boolean)\n                              : handleVariableSelect(variable.id, checked as boolean)\n                          }\n                          data-testid={`checkbox-variable-${variable.id}`}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {hasChildren && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"h-8 w-8 p-0\"\n                            onClick={() => toggleChannelExpanded(variable.id)}\n                            aria-expanded={isExpanded}\n                            data-testid={`button-expand-${variable.id}`}\n                          >\n                            {isExpanded ? (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronRight className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {variable.opcua_reg_add}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {variable.description}\n                      </TableCell>\n                      <TableCell className=\"font-mono font-medium\">\n                        {getVariableValue(variable)}\n                      </TableCell>\n                      <TableCell>\n                        {getDataTypeBadge(variable)}\n                      </TableCell>\n                      <TableCell className=\"font-mono text-xs text-muted-foreground\">\n                        {variable.plc_reg_add}\n                      </TableCell>\n                      <TableCell className=\"font-mono text-xs text-muted-foreground\">\n                        {variable.opcua_reg_add}\n                      </TableCell>\n                    </TableRow>\n                    \n                    {hasChildren && isExpanded && childVariables.map((childVariable, index) => {\n                      const isChildSelected = selectedVariables.has(childVariable.id);\n                      \n                      return (\n                        <TableRow \n                          key={childVariable.id}\n                          className=\"bg-muted/20 border-l-2 border-l-primary/20\"\n                        >\n                          <TableCell>\n                            <Checkbox\n                              checked={isChildSelected}\n                              onCheckedChange={(checked) => \n                                handleVariableSelect(childVariable.id, checked as boolean)\n                              }\n                              data-testid={`checkbox-child-${childVariable.id}`}\n                            />\n                          </TableCell>\n                          <TableCell className=\"pl-8\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {childVariable.bitPosition}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"font-medium text-sm pl-8\">\n                            {childVariable.opcua_reg_add}\n                          </TableCell>\n                          <TableCell className=\"text-sm text-muted-foreground\">\n                            {childVariable.description}\n                          </TableCell>\n                          <TableCell className=\"font-mono font-medium\">\n                            {getVariableValue(childVariable)}\n                          </TableCell>\n                          <TableCell>\n                            {getDataTypeBadge(childVariable)}\n                          </TableCell>\n                          <TableCell className=\"font-mono text-xs text-muted-foreground\">\n                            {childVariable.plc_reg_add}\n                          </TableCell>\n                          <TableCell className=\"font-mono text-xs text-muted-foreground\">\n                            {childVariable.opcua_reg_add}\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </React.Fragment>\n                );\n              })}\n              \n              {filteredParentVariables.length === 0 && (\n                <TableRow>\n                  <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                    {searchTerm ? t(\"noMatchingVariables\") : t(\"noData\")}\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </ScrollArea>\n      </div>\n    </div>\n  );\n}","size_bytes":13700}},"version":1}